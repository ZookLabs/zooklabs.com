{"version":3,"sources":["components/Menu.tsx","components/Home.tsx","config.js","api/zook.js","components/Zooks.tsx","components/Leagues.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Menu","props","state","activeItem","handleItemClick","e","to","setState","location","pathname","this","Container","Item","as","Link","active","onClick","Component","withRouter","Home","API_URL","ApiZook","fetch","method","headers","Headers","then","response","json","id","formData","body","Zooks","loading","zooks","getList","value","Loader","inline","zookItems","map","name","List","href","Header","divided","relaxed","Leagues","Sprint","BlockPush","Hurdles","HighJump","Lap","Boolean","window","hostname","match","ReactDOM","render","path","exact","children","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4a1900e8.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport {Container, Menu as SMenu} from 'semantic-ui-react'\nimport {Link, withRouter} from \"react-router-dom\";\n\nclass Menu extends Component {\n    state = {activeItem: '/'}\n\n    constructor(props: any) {\n        super(props);\n        this.state = {activeItem: props.location.pathname}\n    }\n\n\n    handleItemClick = (e: any, {to}: any) => this.setState({activeItem: to})\n\n\n    render() {\n        const {activeItem} = this.state\n\n        return (\n            <Container>\n                <SMenu>\n                    <SMenu.Item\n                        as={Link}\n                        to='/'\n                        active={activeItem === '/'}\n                        onClick={this.handleItemClick}>\n                        ZookLabs\n                    </SMenu.Item>\n\n                    <SMenu.Item\n                        as={Link}\n                        to='/zook'\n                        active={activeItem === '/zook'}\n                        onClick={this.handleItemClick}>\n                        Zooks\n                    </SMenu.Item>\n\n                    <SMenu.Item\n                        as={Link}\n                        to='/leagues'\n                        active={activeItem === '/leagues'}\n                        onClick={this.handleItemClick}>\n                        Leagues\n                    </SMenu.Item>\n\n                    <SMenu.Item\n                        as={Link}\n                        to='/upload'\n                        active={activeItem === '/upload'}\n                        onClick={this.handleItemClick}>\n                        Leagues\n                    </SMenu.Item>\n                </SMenu>\n            </Container>\n        )\n    }\n}\n\n// @ts-ignore\nexport default withRouter(Menu)","import React from 'react';\n\nfunction Home() {\n  return (\n      <h1>Welcome To Zook Labs</h1>\n  );\n}\n\nexport default Home;\n","const API_URL = \"http://api.zooklabs.com\";\n\nexport default API_URL;\n","import API_URL from '../config';\n\nexport default class ApiZook {\n\n    // get a list of zooks\n    static getList() {\n        return fetch(`${API_URL}/api/zook`, {\n            method: 'get',\n            headers: new Headers({'content-type': 'application/json'})\n        }).then(response => response.json());\n    }\n\n    // get zook detail\n    static get(id) {\n        return fetch(`${API_URL}/api/zook/${id}`, {\n            method: 'get',\n            headers: new Headers({'content-type': 'application/json'})\n        }).then(response => response.json());\n    }\n\n\n    static upload(formData) {\n        return fetch(`${API_URL}/api/zook/upload`, {\n            method: 'post',\n            body: formData,\n        }).then(response => response.json());\n\n    }\n}","import React, {Component} from 'react';\nimport ApiZook from \"../api/zook\";\nimport {List, Loader} from \"semantic-ui-react\";\n\nexport default class Zooks extends Component {\n\n    state = {\n        loading: true,\n        zooks: [],\n    };\n\n    async componentDidMount() {\n        ApiZook.getList().then(value => this.setState({\n            loading: false,\n            zooks: value,\n        }));\n    };\n\n    render() {\n\n        if (this.state.loading) {\n            return <Loader active inline='centered'/>;\n        } else {\n            const zookItems = this.state.zooks.map(({id, name}) => (\n                <List.Item as='a' href={\"/zook/\" + id}>\n                    <List.Header>{name}</List.Header>\n                </List.Item>\n            ))\n            return (\n                <List divided relaxed>\n                    {zookItems}\n\n\n                </List>\n\n            )\n        }\n    }\n}","import {Link} from \"react-router-dom\";\nimport React from \"react\";\n\nfunction Leagues() {\n    return (\n        <div>\n            <h2>Leagues</h2>\n            <ul>\n                <li>\n                    <Link to=\"/leagues/sprint\">Sprint</Link>\n                </li>\n                <li>\n                    <Link to=\"/leagues/blockpush\">BlockPush</Link>\n                </li>\n                <li>\n                    <Link to=\"/leagues/hurdles\">Hurdles</Link>\n                </li>\n                <li>\n                    <Link to=\"/leagues/highjump\">HighJump</Link>\n                </li>\n                <li>\n                    <Link to=\"/leagues/lap\">Lap</Link>\n                </li>\n            </ul>\n        </div>\n    );\n}\n\nexport default Leagues","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\n\n\nimport Menu from './components/Menu'\nimport Home from \"./components/Home\";\nimport {Container, Segment} from \"semantic-ui-react\";\nimport Zooks from \"./components/Zooks\";\nimport Leagues from \"./components/Leagues\";\n\n\nexport default function App() {\n    return (\n            <Router>\n                <Menu/>\n                <Container>\n                    <Switch>\n                        <Route path=\"/\" exact children={Home}/>\n                        {/*<Route path=\"/zook/upload\" component={Upload}/>*/}\n                        {/*<Route path=\"/zook/:id\" component={Zook}/>*/}\n                        <Route path=\"/zook\" exact component={Zooks}/>\n                        <Route path=\"/leagues\" exact children={Leagues}/>\n                        <Route path=\"/leagues/sprint\" children={Sprint}/>\n                        <Route path=\"/leagues/blockpush\" children={BlockPush}/>\n                        <Route path=\"/leagues/hurdles\" children={Hurdles}/>\n                        <Route path=\"/leagues/highjump\" children={HighJump}/>\n                        <Route path=\"/leagues/lap\" children={Lap}/>\n                    </Switch>\n                </Container>\n            </Router>\n    );\n}\n\n\nfunction Sprint() {\n    return (\n        <div>\n            <h3>Sprint</h3>\n        </div>\n    );\n}\n\nfunction BlockPush() {\n    return (\n        <div>\n            <h3>BlockPush</h3>\n        </div>\n    );\n}\n\nfunction Hurdles() {\n    return (\n        <div>\n            <h3>Hurdles</h3>\n        </div>\n    );\n}\n\nfunction HighJump() {\n    return (\n        <div>\n            <h3>HighJump</h3>\n        </div>\n    );\n}\n\nfunction Lap() {\n    return (\n        <div>\n            <h3>Lap</h3>\n        </div>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}