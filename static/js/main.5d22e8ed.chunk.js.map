{"version":3,"sources":["components/Home.tsx","redux/userReducer.ts","components/Zooks.tsx","components/Register.tsx","actions/AuthAction.ts","redux/userActions.ts","redux/loginActionTypes.ts","components/Login.tsx","components/Leagues.tsx","components/Trial.tsx","components/Zook.tsx","components/Upload.tsx","components/League.tsx","components/User.tsx","components/Users.tsx","components/Menu.tsx","App.tsx","serviceWorker.ts","redux/rootReducer.ts","index.tsx"],"names":["Home","UserLoginState","Segment","Group","Header","size","process","Zooks","state","loading","zooks","axios","get","then","response","setState","data","this","Loader","active","inline","zookItems","map","id","name","List","Item","href","key","Icon","inverted","Content","divided","selection","Component","initialUserState","LoggedOut","RegisterState","useDispatchLogin","dispatch","useDispatch","token","decodedToken","defaults","headers","common","username","type","useLoginResponseAction","useCookies","setCookie","dispatchLogin","authorizationHeader","authorization","startsWith","Error","exp","bearer","substring","length","jwt_decode","maxAge","Math","floor","Date","now","sameSite","Login","userState","useSelector","user","login","code","useLoginAction","location","useLocation","history","useHistory","URLSearchParams","search","useState","replace","loggingIn","setLoggingIn","useEffect","discordUrl","window","Registering","LoggedIn","to","Leagues","leagues","setLeagues","leagueCard","league","description","Card","as","Image","src","wrapped","ui","Placeholder","square","Description","Grid","stackable","Row","columns","Column","sprint","high_jump","lap","block_push","hurdles","Trial","props","trial","Table","Cell","trialName","score","measurement","position","Zook","zook","setZook","useParams","clearing","attached","floated","style","margin","identifier","className","flex","minWidth","maxWidth","alt","color","icon","fluid","content","celled","striped","unstackable","HeaderCell","colSpan","Body","about","owner","dateCreated","dateUploaded","physical","height","width","weight","components","achievement","blockPush","highJump","Upload","zookId","setZookId","setLoading","fileValid","setFileValid","FormData","formData","setFormData","uploadError","setUploadError","compact","error","Form","onSubmit","post","catch","Field","onChange","event","file","target","files","item","undefined","endsWith","append","accept","Message","header","disabled","League","setLeague","loader","title","secondary","paddingTop","paddingBottom","updatedAt","basic","selectable","collapsing","entries","display","verticalAlign","User","setUser","signUpAt","lastLoginAt","Users","users","userItems","Register","availability","setAvailability","checkLoading","setCheckLoading","setUsername","usernameValid","setUsernameValid","register","useRegisterAction","Available","success","UnAvailable","widths","onClick","available","Input","label","value","e","test","hidden","zookRegex","Menu","logout","removeCookie","useLogoutAction","Container","activeClassName","exact","isActive","_","pathname","primary","loginState","App","loginLoad","cookies","useLoginLoadAction","isRegistering","path","component","render","Boolean","hostname","match","rootReducer","combineReducers","action","baseURL","store","createStore","devToolsEnhancer","ReactDOM","StrictMode","CookiesProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.5d22e8ed.chunk.js","sourcesContent":["import React from 'react';\nimport {Header, Segment} from \"semantic-ui-react\";\n\nfunction Home() {\n    return (\n        <Segment.Group>\n            <Segment>\n                <Header size=\"huge\">\n                    Welcome To Zook Labs!\n                </Header>\n                {process.env.REACT_APP_WELCOME_MESSAGE}\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nexport default Home;\n","import {LOGIN, LoginActionTypes, LOGOUT, REGISTER} from \"./loginActionTypes\";\n\n\nexport enum UserLoginState {\n    LoggedOut,\n    LoggedIn,\n    Registering\n}\n\ninterface State {\n    state: UserLoginState\n}\n\ninterface LoggedIn extends State {\n    username: string\n    state: UserLoginState.LoggedIn\n}\n\n\ninterface LoggedOut extends State {\n    state: UserLoginState.LoggedOut\n}\n\ninterface Registering extends State {\n    state: UserLoginState.Registering\n}\n\nexport type UserState = LoggedIn | LoggedOut | Registering\n\nexport const isLoggedIn = (userState: UserState) => {\n    return userState.state === UserLoginState.LoggedIn\n}\n\nexport const isRegistering = (userState: UserState) => {\n    return userState.state === UserLoginState.Registering\n}\n\nexport const isLoggedOut = (userState: UserState) => {\n    return userState.state === UserLoginState.LoggedOut\n}\n\n\nexport const initialUserState: UserState = {\n    state: UserLoginState.LoggedOut\n}\n\nexport function userReducer(\n    state = initialUserState,\n    action: LoginActionTypes\n):  UserState {\n    switch (action.type) {\n        case LOGIN:\n            return {\n                state: UserLoginState.LoggedIn,\n                username: action.username\n            }\n        case REGISTER:\n            return {\n                state: UserLoginState.Registering\n            }\n        case LOGOUT:\n            return {\n                state: UserLoginState.LoggedOut\n            }\n        default:\n            return state\n    }\n}","import React, {Component} from 'react';\nimport {Header, Icon, List, Loader, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport {TZookIdentifier} from \"../types/TZookIdentifier\";\n\ninterface IZooksProps {\n\n}\n\ninterface IZooksState {\n    loading: boolean\n    zooks: TZookIdentifier[],\n}\n\nexport default class Zooks extends Component<IZooksProps,IZooksState> {\n    state = {\n        loading: true,\n        zooks: []\n    }\n\n    async componentDidMount() {\n        axios.get<TZookIdentifier[]>('/zooks').then(response =>\n            this.setState({\n                loading: false,\n                zooks: response.data\n            })\n        )\n    }\n\n    render() {\n        if (this.state.loading) {\n            return <Loader active inline='centered'/>;\n        } else {\n            const zookItems = this.state.zooks.map(({id, name}) => (\n                <List.Item href={\"/zooks/\" + id} key={id}>\n                    <Icon name='bug' inverted/>\n                    <List.Content>\n                        <List.Header>{id} - <b>{name}</b></List.Header>\n                    </List.Content>\n                </List.Item>\n            ))\n            return (\n                <Segment.Group>\n                    <Segment>\n                        <Header size=\"huge\">\n                            Zooks\n                        </Header>\n                    </Segment>\n                    <Segment>\n                        <List divided selection size='large'>\n                            {zookItems}\n                        </List>\n                    </Segment>\n                </Segment.Group>\n            )\n        }\n    }\n}","import React, {FC, useState} from \"react\";\nimport {Button, Form, Header, Icon, Message, Segment, Table} from \"semantic-ui-react\";\nimport axios, {AxiosError, AxiosResponse} from \"axios\";\nimport {useRegisterAction} from \"../actions/AuthAction\";\n\ntype TAvailability = {\n    available: boolean\n}\n\nenum RegisterState {\n    Available,\n    UnAvailable,\n    Error\n}\n\nconst Register: FC = () => {\n\n    const [availability, setAvailability] = useState<RegisterState>()\n\n    const [loading, setLoading] = useState<boolean>(false)\n    const [checkLoading, setCheckLoading] = useState<boolean>(false)\n\n    const [username, setUsername] = useState<string>(\"\")\n    const [usernameValid, setUsernameValid] = useState<boolean>(false)\n\n\n    const register: (code: string) => Promise<void> = useRegisterAction()\n\n    const usernameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setAvailability(undefined)\n        setUsername(e.target.value)\n        setUsernameValid(/^[A-Za-z0-9_]{3,20}$/.test(e.target.value))\n    }\n\n    const checkAvailability = () => {\n        setCheckLoading(true)\n        axios.get<TAvailability>(`/login/availability/${username}`).then((response: AxiosResponse) => {\n                if (response.data.available) {\n                    setAvailability(RegisterState.Available)\n                } else {\n                    setAvailability(RegisterState.UnAvailable)\n                }\n                setCheckLoading(false)\n            }\n        ).catch((error: AxiosError) => {\n            setAvailability(RegisterState.Error)\n            setCheckLoading(false)\n        })\n    }\n\n    const handleSubmit = () => {\n        setLoading(true)\n        if (availability === RegisterState.Available) {\n            register(username)\n        }\n    }\n\n        return <>\n            <Segment.Group>\n                <Segment clearing attached='top'>\n                    <Header floated=\"left\" size='huge' style={{margin: 0}}>\n                        Register Username\n                    </Header>\n                </Segment>\n                <Segment attached>\n                    <Table compact color=\"orange\" inverted>\n                        <Table.Header>\n                            <Table.Row>\n                                <Table.HeaderCell> <Icon name='attention'/> Username Cannot be\n                                    changed</Table.HeaderCell>\n                            </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            <Table.Row>\n                                <Table.Cell error>\n                                    <Icon name='attention'/>Usernames can be between 3 and 20 characters long.</Table.Cell>\n                            </Table.Row>\n                            <Table.Row>\n                                <Table.Cell error>\n                                    <Icon name='attention'/>Usernames may contain UPPER and lower letters (A-Z,a-z), numbers (0-9) and underscore (_).</Table.Cell>\n                            </Table.Row>\n                        </Table.Body>\n                    </Table>\n                </Segment>\n                <Segment attached>\n                    <Form onSubmit={handleSubmit} success={availability === RegisterState.Available}\n                          error={availability === RegisterState.UnAvailable || availability === RegisterState.Error}\n                          loading={loading}>\n\n                        <Form.Group widths='equal'>\n                            <Button type='button' disabled={!usernameValid} onClick={checkAvailability} loading={checkLoading}>Check Availability</Button>\n                            <Form.Input\n                                label='Username'\n                                value={username}\n                                onChange={usernameChange}\n                                error={!usernameValid || availability === RegisterState.UnAvailable || availability === RegisterState.Error}\n                                loading={checkLoading}\n                            />\n                        </Form.Group>\n\n                        <Message\n                            success\n                            header='Username Is Available'\n                            content=\"REMEMBER YOU CAN ONLY SET THIS ONCE\"\n                        />\n                        <Message\n                            hidden={availability !== RegisterState.UnAvailable}\n                            error\n                            header='Username Not Available'\n                        />\n                        <Message\n                            hidden={availability !== RegisterState.Error || !usernameValid}\n                            error\n                            header='Username Is Invalid'\n                        />\n\n                        <Button type='submit' disabled={availability !== RegisterState.Available}>Submit</Button>\n                    </Form>\n                </Segment>\n            </Segment.Group>\n        </>\n\n}\n\nexport default Register","import jwt_decode from \"jwt-decode\";\nimport {LoginUser, LogoutUser, RegisterUser} from \"../redux/userActions\";\nimport axios, {AxiosResponse} from \"axios\";\nimport {useDispatch} from \"react-redux\";\nimport {useCookies} from \"react-cookie\";\n\ntype JwtToken = {\n    username?: string\n    exp: number\n}\n\nconst getToken = (bearer: string) => bearer.substring(7, bearer.length)\n\nconst maxAge = (exp: number) => exp - Math.floor(Date.now() / 1000)\n\n\nexport const useDispatchLogin = () => {\n    const dispatch = useDispatch()\n    return (token: string, decodedToken: JwtToken) => {\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`\n        if (decodedToken.username) {\n            dispatch(LoginUser(decodedToken.username))\n        } else {\n            dispatch(RegisterUser())\n        }\n    }\n}\n\nexport const useLoginLoadAction = () => {\n    const [cookies] = useCookies(['token'])\n    const dispatchLogin = useDispatchLogin()\n\n    return () => {\n        let token: string | undefined = cookies.token\n        if (token) {\n            let decodedToken = jwt_decode<JwtToken>(token)\n            dispatchLogin(token, decodedToken)\n        }\n    }\n}\n\nexport const useLogoutAction = () => {\n    const dispatch = useDispatch()\n    const [, , removeCookie] = useCookies()\n    return () => {\n        axios.defaults.headers = undefined\n        removeCookie(\"token\")\n        dispatch(LogoutUser())\n    }\n}\n\n\nconst useLoginResponseAction = () => {\n    const [, setCookie] = useCookies()\n    const dispatchLogin = useDispatchLogin()\n\n    return (response: AxiosResponse) => {\n        let authorizationHeader = response.headers.authorization\n        if (authorizationHeader && authorizationHeader.startsWith(\"Bearer \")) {\n\n            let token = getToken(authorizationHeader)\n            let decodedToken = jwt_decode<JwtToken>(token)\n\n            setCookie(\"token\", token, {maxAge: maxAge(decodedToken.exp), sameSite: \"strict\"})\n\n            dispatchLogin(token, decodedToken)\n        } else if (!authorizationHeader) {\n            throw new Error(\"authorization header missing\")\n        } else {\n            throw new Error(\"authorization header does not start with Bearer \")\n        }\n    }\n}\n\nexport const useRegisterAction = () => {\n    const login = useLoginResponseAction()\n    return (username: string) => {\n        return axios.post(`/login/register`, {username: username}).then(login)\n    }\n}\n\nexport const useLoginAction = () => {\n    const login = useLoginResponseAction()\n    return (code: string) => {\n        return axios.get(`/login?code=${code}`).then(login)\n    }\n}\n\n","import {LOGIN, LoginActionTypes, LOGOUT, REGISTER} from \"./loginActionTypes\";\n\n\nexport function LoginUser(username: string): LoginActionTypes {\n  return {\n    type: LOGIN,\n    username: username\n  }\n}\n\nexport function RegisterUser(): LoginActionTypes {\n  return {\n    type: REGISTER\n  }\n}\n\nexport function LogoutUser(): LoginActionTypes {\n  return {\n    type: LOGOUT\n  }\n}","export const LOGIN = 'LOGIN'\nexport const REGISTER = 'REGISTER'\nexport const LOGOUT = 'LOGOUT'\n\ninterface LoginAction {\n  type: typeof LOGIN\n  username: string\n}\n\ninterface RegisterAction {\n  type: typeof REGISTER\n}\n\ninterface LogoutAction {\n  type: typeof LOGOUT\n}\n\nexport type LoginActionTypes = LoginAction | RegisterAction | LogoutAction","import React, {FC, useEffect, useState} from 'react';\nimport {useHistory, useLocation} from \"react-router\";\n\nimport {ApplicationState} from \"../redux/rootReducer\";\nimport {useSelector} from \"react-redux\";\nimport {Loader, Segment} from \"semantic-ui-react\";\nimport {Redirect} from \"react-router-dom\";\nimport {UserLoginState, UserState} from \"../redux/userReducer\";\nimport {useLoginAction} from \"../actions/AuthAction\";\n\nconst Login: FC = () => {\n\n    const userState = useSelector<ApplicationState, UserState>(state => state.user)\n\n    const login: (code: string) => Promise<void> = useLoginAction()\n\n    let location = useLocation()\n    let history = useHistory()\n\n    let code = new URLSearchParams(location.search).get(\"code\")\n\n    let loggingInState = () => {\n        if (code) {\n            history.replace(\"/login\")\n            return true\n        } else {\n            return false\n        }\n    }\n\n    const [loggingIn, setLoggingIn] = useState<boolean>(loggingInState());\n\n    useEffect(() => {\n        if (code) { login(code).then(() => setLoggingIn(false))}\n    }, [code,login])\n\n    if (loggingIn) {\n        return <Segment><Loader active inline='centered'/></Segment>\n    } else {\n        switch (userState.state) {\n            case UserLoginState.LoggedOut:\n                let discordUrl = `https://discord.com/api/oauth2/authorize?client_id=742381294079705220&redirect_uri=${process.env.REACT_APP_DISCORD_CALLBACK_URL}&response_type=code&scope=identify`\n                return <Segment>\n                    <script>{window.location.href = discordUrl}</script>\n                    Redirecting to Discord.\n                    <a href={discordUrl}>Not Redirecting? Click Here!</a>\n                    <Loader active inline='centered'/>\n                </Segment>\n\n            case UserLoginState.Registering:\n                return <Segment><Loader active inline='centered'/></Segment>\n            case UserLoginState.LoggedIn:\n                return <Redirect to={`/users/${userState.username}`}/>\n        }\n    }\n}\n\nexport default Login\n","import React, {FC, useEffect, useState} from \"react\";\nimport {Card, Grid, Header, Image, Placeholder, Segment} from \"semantic-ui-react\";\nimport axios from \"axios\";\n\ntype TLeagues = {\n    block_push: number\n    sprint: number\n    hurdles: number\n    lap: number\n    high_jump: number\n}\n\nconst Leagues: FC = () => {\n    const [leagues, setLeagues] = useState<TLeagues>()\n\n    useEffect(() => {\n        axios.get<TLeagues>('/leagues').then(response => {\n                setLeagues(response.data)\n            }\n        )\n    }, [])\n\n    let leagueCard = (league: string, id: number | undefined, name: string, description: string) => {\n        return (\n            <Card as='a' href={'/leagues/' + league}>\n                {id ? (\n                    <Image src={'http://static.zooklabs.com/zooks/' + id + '/image.png'} wrapped ui={false}/>\n                ) : (\n                    <Placeholder>\n                        <Placeholder.Image square/>\n                    </Placeholder>\n                )}\n                <Card.Content>\n                    <Card.Header>{name}</Card.Header>\n                    <Card.Description>\n                        {description}\n                    </Card.Description>\n                </Card.Content>\n            </Card>\n        )\n    }\n\n    return (\n        <Segment.Group>\n            <Segment>\n                <Header size=\"huge\">\n                    Leagues\n                </Header>\n            </Segment>\n            <Segment>\n                <Grid stackable>\n                    <Grid.Row columns={3}>\n                        <Grid.Column>\n                            {leagueCard('sprint', leagues?.sprint, 'Sprint', 'Which is the fastest Zook in the world? Check the Sprint Trial League.')}\n                        </Grid.Column>\n                        <Grid.Column>\n                            {leagueCard('high_jump', leagues?.high_jump, 'High Jump', 'The Zooks are jumping higher and higher, but which is the highest?')}\n                        </Grid.Column>\n                        <Grid.Column>\n                            {leagueCard('lap', leagues?.lap, 'Single Lap', 'Whose Zook can run a lap faster than all the other Zooks?')}\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row columns={3}>\n                        <Grid.Column>\n                            {leagueCard('block_push', leagues?.block_push, 'Block Push', 'There\\'s some stiff competition in the Block Push Trial League...')}\n                        </Grid.Column>\n                        <Grid.Column>\n                            {leagueCard('hurdles', leagues?.hurdles, 'Hurdles', 'Which Zook does the best at getting over the hurdles?')}\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n\n            </Segment>\n        </Segment.Group>\n    )\n}\n\nexport default Leagues","import React, {FC} from \"react\";\nimport {Table} from \"semantic-ui-react\";\n\nexport type TZookTrial = {\n    score: number\n    position: number\n}\n\ntype ITrialProps = {\n    trialName: string\n    trial?: TZookTrial\n    measurement: string\n}\n\nconst Trial: FC<ITrialProps> = (props) => {\n    if (props.trial) {\n        return (\n            <Table.Row>\n                <Table.Cell>{props.trialName}</Table.Cell>\n                <Table.Cell>{props.trial.score} {props.measurement}</Table.Cell>\n                <Table.Cell>{props.trial.position === 2147483647 ? '--' : props.trial.position}</Table.Cell>\n            </Table.Row>\n        )\n    } else {\n        return (\n            <Table.Row>\n                <Table.Cell>{props.trialName}</Table.Cell>\n                <Table.Cell>N/A</Table.Cell>\n                <Table.Cell>N/A</Table.Cell>\n            </Table.Row>\n        )\n    }\n}\n\nexport default Trial","import React, {FC, useEffect, useState} from 'react';\nimport Trial, {TZookTrial} from \"./Trial\";\nimport {Grid, Header, Loader, Segment, Table} from 'semantic-ui-react';\nimport Button from \"semantic-ui-react/dist/commonjs/elements/Button\";\nimport {useParams} from \"react-router\";\nimport axios from 'axios';\nimport {Link} from \"react-router-dom\";\nimport {TZookIdentifier} from \"../types/TZookIdentifier\";\n\ntype TZookOwner = {\n    id: string\n    username: string\n}\n\ntype TZookAbout = {\n    owner?: TZookOwner\n    dateCreated: string\n    dateUploaded: string\n}\n\ntype TZookPhysical = {\n    height: number\n    length: number\n    width: number\n    weight: number\n    components: number\n}\n\ntype TZookAchievement = {\n    sprint?: TZookTrial\n    blockPush?: TZookTrial\n    hurdles?: TZookTrial\n    highJump?: TZookTrial\n    lap?: TZookTrial\n}\n\ntype TZook = {\n    identifier: TZookIdentifier\n    about: TZookAbout\n    physical: TZookPhysical\n    achievement: TZookAchievement\n}\n\ninterface RouteParams {\n    id: string\n}\n\n\nconst Zook: FC = () => {\n    const [zook, setZook] = useState<TZook>();\n    let {id} = useParams<RouteParams>()\n\n    useEffect(() => {\n        axios.get<TZook>(`zooks/${id}`).then(response =>\n            setZook(response.data)\n        )\n    },[id])\n\n\n    if (!zook) {\n        return <Loader active inline='centered'/>;\n    } else {\n\n        const owner = () => {\n            if (zook.about.owner) {\n                return (<Table.Cell>\n                    <Link to={`/users/${zook.about.owner.username}`}>{zook.about.owner.username}</Link>\n                </Table.Cell>)\n            } else {\n                return <Table.Cell>Anonymous</Table.Cell>\n            }\n        }\n        return (\n            <Segment.Group>\n                <Segment clearing attached='top'>\n                    <Header floated=\"left\" size='huge' style={{margin: 0}}>\n                        Zook Name: {zook.identifier.name}\n                    </Header>\n                    <Header floated=\"right\" size='huge'>\n                        Zook ID: {zook.identifier.id}\n                    </Header>\n                </Segment>\n                <Segment attached>\n                    <Grid stackable>\n                        <div className=\"two column row ui segment attached\">\n                            <Grid.Column style={{flex: \"0\"}}>\n                                <img src={\"http://static.zooklabs.com/zooks/\" + zook.identifier.id + \"/image.png\"}\n                                     style={{minWidth: 256, maxWidth: 256}} alt={\"\" + zook.identifier.name}/>\n                                <Button color='blue' as=\"a\" icon=\"download\" fluid content=\"Download Zook\"\n                                        href={\"http://static.zooklabs.com/zooks/\" + zook.identifier.id + \"/\" + zook.identifier.name + \".zook\"}/>\n                            </Grid.Column>\n                            <Grid.Column style={{flex: \"1\"}}>\n                                <Table celled striped unstackable color=\"green\">\n                                    <Table.Header>\n                                        <Table.Row>\n                                            <Table.HeaderCell colSpan='2'>About</Table.HeaderCell>\n                                        </Table.Row>\n                                    </Table.Header>\n                                    <Table.Body>\n                                        <Table.Row>\n                                            <Table.Cell>Owner</Table.Cell>\n                                            {owner()}\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Birth/Adoption date</Table.Cell>\n                                            <Table.Cell>{zook.about.dateCreated}</Table.Cell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Date of Upload</Table.Cell>\n                                            <Table.Cell>{zook.about.dateUploaded}</Table.Cell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Number of Downloads</Table.Cell>\n                                            <Table.Cell>N/A</Table.Cell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Number of times viewed</Table.Cell>\n                                            <Table.Cell>N/A</Table.Cell>\n                                        </Table.Row>\n                                    </Table.Body>\n                                </Table>\n                            </Grid.Column>\n                        </div>\n                        <div className=\"column row ui segment attached\">\n                            <Grid.Column>\n                                <Table celled striped unstackable color=\"green\">\n                                    <Table.Header>\n                                        <Table.Row>\n                                            <Table.HeaderCell colSpan='2'>Physical Information</Table.HeaderCell>\n                                        </Table.Row>\n                                    </Table.Header>\n                                    <Table.Body>\n                                        <Table.Row>\n                                            <Table.Cell>Height</Table.Cell>\n                                            <Table.Cell>{zook.physical.height} cm</Table.Cell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Length</Table.Cell>\n                                            <Table.Cell>{zook.physical.length} cm</Table.Cell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Width</Table.Cell>\n                                            <Table.Cell>{zook.physical.width} cm</Table.Cell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Weight</Table.Cell>\n                                            <Table.Cell>{zook.physical.weight} kg</Table.Cell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Components</Table.Cell>\n                                            <Table.Cell>{zook.physical.components}</Table.Cell>\n                                        </Table.Row>\n                                    </Table.Body>\n                                </Table>\n                                <Table celled striped unstackable color=\"green\">\n                                    <Table.Header>\n                                        <Table.Row>\n                                            <Table.HeaderCell colSpan={3}>Achievements</Table.HeaderCell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.HeaderCell>Trial</Table.HeaderCell>\n                                            <Table.HeaderCell>Result</Table.HeaderCell>\n                                            <Table.HeaderCell>Position</Table.HeaderCell>\n                                        </Table.Row>\n                                    </Table.Header>\n                                    <Table.Body>\n                                        <Trial trial={zook.achievement.sprint} trialName=\"Sprint\"\n                                               measurement=\"cm/sec\"/>\n                                        <Trial trial={zook.achievement.blockPush} trialName=\"Block Push\"\n                                               measurement=\"cm\"/>\n                                        <Trial trial={zook.achievement.hurdles} trialName=\"Hurdles\"\n                                               measurement=\"cm/sec\"/>\n                                        <Trial trial={zook.achievement.highJump} trialName=\"High Jump\"\n                                               measurement=\"cm\"/>\n                                        <Trial trial={zook.achievement.lap} trialName=\"Lap\"\n                                               measurement=\"sec\"/>\n                                    </Table.Body>\n                                </Table>\n                            </Grid.Column>\n                        </div>\n                    </Grid>\n                </Segment>\n            </Segment.Group>\n        )\n    }\n}\n\nexport default Zook","import React, {FC, useState} from 'react'\nimport {Button, Form, Header, Icon, Message, Segment, Table} from 'semantic-ui-react'\nimport {Redirect} from 'react-router-dom';\nimport axios, {AxiosError} from \"axios\";\n\ntype TUploadResponse = {\n    id: number\n}\n\ntype TUploadError = {\n    error: string\n}\n\nconst Upload: FC = () => {\n    const [zookId, setZookId] = useState<number>()\n    const [loading, setLoading] = useState<boolean>(false)\n    const [fileValid, setFileValid] = useState<boolean>(false)\n\n    const [formData, setFormData] = useState<FormData>(new FormData())\n\n    const [uploadError, setUploadError] = useState<string>()\n\n\n    const handleSubmit = () => {\n        if (formData.get('zook')) {\n            setLoading(true)\n            axios.post<TUploadResponse>('/zooks/upload', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            }).then(response => {\n                    setZookId(response.data.id)\n                    setLoading(false)\n                }\n            ).catch((error: AxiosError<TUploadError>) => {\n                if (error.response) {\n                    setUploadError(error.response.data.error)\n                    setFileValid(false)\n                    setLoading(false)\n\n                } else {\n                    throw error\n                }\n            })\n        }\n    }\n\n    const fileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let file = event.target.files?.item(0)\n        setUploadError(undefined)\n        if (file && file.name.endsWith(\".zook\")) {\n            const formData = new FormData()\n            formData.append('zook', file)\n            setFormData(formData)\n            setFileValid(true)\n        } else {\n            setFileValid(false)\n        }\n    }\n\n    if (zookId) {\n        return <Redirect to={`/zooks/${zookId}`}/>\n    } else {\n        return (\n            <Segment.Group>\n                <Segment>\n                    <Header size='huge'>\n                        Zook Upload\n                    </Header>\n                </Segment>\n                <Segment>\n                    <Table compact color=\"orange\" inverted>\n                        <Table.Header>\n                            <Table.Row>\n                                <Table.HeaderCell><Icon name='attention'/> Upload Requirements</Table.HeaderCell>\n                            </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            <Table.Row>\n                                <Table.Cell error>\n                                    <Icon name='attention'/>Must have a Passport Photo</Table.Cell>\n                            </Table.Row>\n                            <Table.Row>\n                                <Table.Cell error>\n                                    <Icon name='attention'/>Does not support Street Rules</Table.Cell>\n                            </Table.Row>\n                        </Table.Body>\n                    </Table>\n                </Segment>\n                <Segment>\n                    <Form onSubmit={handleSubmit} loading={loading} error={!!uploadError}>\n                        <Form.Field error={!!uploadError}>\n                            <label>Zook File</label>\n                            <input type='file'\n                                   onChange={fileChange}\n                                   accept=\".zook\"/>\n                        </Form.Field>\n                        <Message\n                            error\n                            header={uploadError}\n                        />\n                        <Button type=\"submit\" color='blue' icon=\"upload\" disabled={!fileValid} content=\"Upload Zook\"/>\n                    </Form>\n                </Segment>\n            </Segment.Group>\n        )\n    }\n}\n\nexport default Upload","import React, {FC, useEffect, useState} from \"react\"\nimport {Header, Image, Loader, Segment, Table} from \"semantic-ui-react\"\nimport axios from 'axios';\n\ntype TLeagueEntry = {\n    zookId: number\n    name: string\n    score: number\n    position: number\n}\n\ntype TLeague = {\n    updatedAt: string\n    entries: TLeagueEntry[]\n}\n\n\ninterface ILeagueProps {\n    league: string\n    title: string\n    measurement: string\n}\n\nconst League: FC<ILeagueProps> = (props) => {\n\n    const [league, setLeague] = useState<TLeague>()\n\n    useEffect(() => {\n        axios.get<TLeague>(`/leagues/${props.league}`).then(response => {\n            setLeague(response.data)\n        })\n    }, [props.league])\n\n    const zookItems = (league: TLeague) => league.entries.map(({zookId, name, score, position}) => (\n        <Table.Row key={zookId}>\n            <Table.Cell><b>{position === 2147483647 ? '--' : position}</b></Table.Cell>\n            <Table.Cell><b>{score}&nbsp;{props.measurement}</b></Table.Cell>\n            <a href={\"/zooks/\" + zookId}\n               style={{display: 'contents', color: \"rgba(0,0,0,.87)\", verticalAlign: \"middle\"}}>\n                <Table.Cell>\n                    <b>{name}</b>\n                </Table.Cell>\n            </a>\n            <Table.Cell>\n                {\n                    position < 6 ?\n                        <Image src={`http://static.zooklabs.com/zooks/${zookId}/image.png`}\n                               size={position === 1 ? \"small\" : \"tiny\"}/> : null\n                }\n            </Table.Cell>\n        </Table.Row>\n    ))\n\n    const loader = <Loader active inline='centered'/>\n\n    return <>\n        <Segment.Group>\n            <Segment>\n                <Header size=\"huge\">\n                    {props.title} League\n                </Header>\n            </Segment>\n            <Segment secondary inverted size='tiny' style={{paddingTop: \"6px\", paddingBottom: \"6px\"}}>\n                <b>Updated : {league?.updatedAt}</b>\n            </Segment>\n            <Segment>\n                <Table basic='very' selectable unstackable>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell collapsing>Position</Table.HeaderCell>\n                            <Table.HeaderCell collapsing>Score</Table.HeaderCell>\n                            <Table.HeaderCell collapsing>Zook</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {league ? zookItems(league) : loader}\n                    </Table.Body>\n                </Table>\n            </Segment>\n        </Segment.Group>\n    </>\n\n\n}\n\nexport default League","import React, {FC, useEffect, useState} from \"react\";\nimport {useHistory, useParams} from \"react-router\";\nimport {Header, Icon, List, Loader, Segment, Table} from \"semantic-ui-react\";\nimport axios from \"axios\";\nimport {TZookIdentifier} from \"../types/TZookIdentifier\";\nimport {TUserIdentifier} from \"../types/TUserIdentifier\";\n\ntype TUserAbout = {\n    signUpAt: string\n    lastLoginAt: string\n}\n\ntype TUser = {\n    identifier: TUserIdentifier,\n    about: TUserAbout,\n    zooks: TZookIdentifier[]\n}\n\ninterface RouteParams {\n    username: string\n}\n\nconst User: FC = () => {\n    let {username} = useParams<RouteParams>()\n    let history = useHistory()\n\n    const [user, setUser] = useState<TUser>();\n\n    useEffect(() => {\n        axios.get<TUser>(`users/${username}`).then(response => {\n                history.replace(response.data.identifier.username)\n                setUser(response.data)\n            }\n        )\n    }, [username, history])\n\n\n    if (user) {\n        const zookItems = user.zooks.map(({id, name}) => (\n            <List.Item href={\"/zooks/\" + id} key={id}>\n                <Icon name='bug' inverted/>\n                <List.Content>\n                    <List.Header>{id} - <b>{name}</b></List.Header>\n                </List.Content>\n            </List.Item>\n        ))\n\n\n        return <Segment.Group>\n            <Segment clearing attached='top'>\n                <Header floated=\"left\" size='huge' style={{margin: 0}}>\n                    User: {user.identifier.username}\n                </Header>\n            </Segment>\n            <Table attached='top' celled striped unstackable color=\"green\">\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell colSpan='2'>About</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    <Table.Row>\n                        <Table.Cell>Signed Up</Table.Cell>\n                        <Table.Cell>{user.about.signUpAt}</Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>Last Logged In</Table.Cell>\n                        <Table.Cell>{user.about.lastLoginAt}</Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>Uploaded Zooks</Table.Cell>\n                        <Table.Cell>{zookItems.length}</Table.Cell>\n                    </Table.Row>\n                </Table.Body>\n            </Table>\n\n            <Segment attached>\n                <List divided selection size='large'>\n                    {zookItems}\n                </List>\n            </Segment>\n        </Segment.Group>\n    } else {\n\n        return <Segment><Loader active inline='centered'/></Segment>\n    }\n}\n\nexport default User","import React, {Component} from 'react';\nimport {Header, Icon, List, Loader, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport {TUserIdentifier} from \"../types/TUserIdentifier\";\n\n\ninterface IUsersProps {\n\n}\n\ninterface IUsersState {\n    loading: boolean\n    users: TUserIdentifier[],\n}\n\nexport default class Users extends Component<IUsersProps, IUsersState> {\n    state = {\n        loading: true,\n        users: []\n    }\n\n    async componentDidMount() {\n        axios.get<TUserIdentifier[]>('/users').then(response =>\n            this.setState({\n                loading: false,\n                users: response.data\n            })\n        )\n    }\n\n    render() {\n        if (this.state.loading) {\n            return <Loader active inline='centered'/>;\n        } else {\n            const userItems = this.state.users.map(({username}) => (\n                <List.Item href={\"/users/\" + username} key={username}>\n                    <Icon name='user' inverted/>\n                    <List.Content>\n                        <List.Header>{username}</List.Header>\n                    </List.Content>\n                </List.Item>\n            ))\n            return (\n                <Segment.Group>\n                    <Segment>\n                        <Header size=\"huge\">\n                            Users\n                        </Header>\n                    </Segment>\n                    <Segment>\n                        <List divided selection size='large'>\n                            {userItems}\n                        </List>\n                    </Segment>\n                </Segment.Group>\n            )\n        }\n    }\n}","import React, {FC} from 'react'\nimport {Button, Container, Icon, Menu as SMenu} from 'semantic-ui-react'\nimport {NavLink} from \"react-router-dom\";\nimport {UserLoginState, UserState} from \"../redux/userReducer\";\nimport {useSelector} from \"react-redux\";\nimport {ApplicationState} from \"../redux/rootReducer\";\nimport {useLogoutAction} from \"../actions/AuthAction\";\n\n\nconst zookRegex = /^\\/zooks\\/?\\d*$/\n\nconst Menu: FC = () => {\n\n    const userState = useSelector<ApplicationState,UserState>(state => state.user)\n\n    const logout = useLogoutAction()\n\n    const loginState = () => {\n\n        switch (userState.state) {\n            case UserLoginState.LoggedIn:\n                let username = userState.username\n                return <SMenu.Menu position='right'>\n                    <NavLink to={`/users/${username}`} activeClassName=\"active\" className=\"item\"\n                             isActive={(_, {pathname}) => {\n                                 return `/users/${username}` === pathname\n                             }}\n                    >{username}</NavLink>\n                    <SMenu.Item>\n                        <Button active={true} onClick={logout} primary>Logout</Button>\n                    </SMenu.Item>\n                </SMenu.Menu>\n\n            case UserLoginState.LoggedOut:\n                return <SMenu.Menu position='right'>\n                    <SMenu.Item>\n                        <NavLink to=\"/login\" activeClassName=\"active\" className=\"ui primary button\">Login</NavLink>\n                    </SMenu.Item>\n                </SMenu.Menu>\n\n            case UserLoginState.Registering:\n                return <SMenu.Menu position='right'>\n                    <SMenu.Item>\n                        <Button active={true} onClick={logout} color='red' primary>Cancel</Button>\n                    </SMenu.Item>\n                </SMenu.Menu>\n        }\n    }\n\n\n    return (\n        <Container>\n            <SMenu>\n                <NavLink to=\"/\" activeClassName=\"active\" className=\"item\" exact={true}>ZookLabs</NavLink>\n                <NavLink to=\"/zooks\" activeClassName=\"active\" className=\"item\"\n                         isActive={(_, {pathname}) => {\n                             return zookRegex.test(pathname)\n                         }}\n                >Zooks</NavLink>\n                <NavLink to=\"/leagues\" activeClassName=\"active\" className=\"item\">Leagues</NavLink>\n                <NavLink to=\"/zooks/upload\" activeClassName=\"active\" className=\"item\" exact={true}>Upload</NavLink>\n                <NavLink to=\"/users\" activeClassName=\"active\" className=\"item\">Users</NavLink>\n                {loginState()}\n                <a className=\"discord item\" href=\"http://discord.zooklabs.com\"><Icon name='discord' inverted />Discord</a>\n            </SMenu>\n        </Container>\n    )\n}\n\nexport default Menu\n","import React, {FC, useEffect} from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Redirect, Route, Switch} from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport Zooks from \"./components/Zooks\";\nimport Login from \"./components/Login\";\nimport Leagues from \"./components/Leagues\";\nimport Zook from \"./components/Zook\";\nimport Upload from \"./components/Upload\";\nimport League from \"./components/League\";\nimport {useSelector} from \"react-redux\";\nimport User from \"./components/User\";\nimport Users from \"./components/Users\";\nimport Register from \"./components/Register\";\nimport {ApplicationState} from \"./redux/rootReducer\";\nimport {isRegistering, UserState} from \"./redux/userReducer\";\nimport {useLoginLoadAction} from \"./actions/AuthAction\";\nimport Menu from \"./components/Menu\";\nimport {Container} from \"semantic-ui-react\";\n\nconst App: FC = () => {\n\n    const userState = useSelector<ApplicationState, UserState>(state => state.user)\n\n    const loginLoad = useLoginLoadAction()\n\n    useEffect(loginLoad, []);\n\n    let registering = () => {\n        return <>\n            <Switch>\n                <Route path=\"/login\" exact component={Register}/>\n                <Redirect to=\"/login\"/>\n            </Switch>\n        </>\n    }\n\n    let routes = () => {\n        return <>\n            <Switch>\n                <Route path=\"/\" exact component={Home}/>\n                <Route path=\"/login\" exact component={Login}/>\n\n                <Route path=\"/zooks/upload\" exact component={Upload}/>\n                <Route path=\"/zooks/:id\" component={Zook}/>\n                <Route path=\"/zooks\" exact component={Zooks}/>\n\n                <Route path=\"/users\" exact component={Users}/>\n                <Route path=\"/users/:username\" component={User}/>\n\n                <Route path=\"/leagues\" exact component={Leagues}/>\n                <Route path=\"/leagues/sprint\"\n                       render={props => <League {...props} league=\"sprint\" title=\"Sprint\"\n                                                measurement=\"cm/sec\"/>}/>\n                <Route path=\"/leagues/block_push\"\n                       render={props => <League {...props} league=\"block_push\" title=\"Block Push\"\n                                                measurement=\"cm\"/>}/>\n                <Route path=\"/leagues/hurdles\"\n                       render={props => <League {...props} league=\"hurdles\" title=\"Hurdles\"\n                                                measurement=\"cm/sec\"/>}/>\n                <Route path=\"/leagues/high_jump\"\n                       render={props => <League {...props} league=\"high_jump\" title=\"High Jump\"\n                                                measurement=\"cm\"/>}/>\n                <Route path=\"/leagues/lap\"\n                       render={props => <League {...props} league=\"lap\" title=\"Lap\"\n                                                measurement=\"sec\"/>}/>\n                <Redirect to=\"/\"/>\n            </Switch>\n        </>\n    }\n\n\n    return (\n        <Router>\n            <Menu/>\n            <Container>\n                {isRegistering(userState) ? registering() : routes()}\n            </Container>\n        </Router>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux'\nimport {userReducer, initialUserState, UserState} from \"./userReducer\";\n\nexport interface ApplicationState {\n  user: UserState\n}\n\nexport const initialState: ApplicationState = {\n    user: initialUserState\n};\n\n\nexport const rootReducer = combineReducers<ApplicationState>({\n  user: userReducer\n})\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {CookiesProvider} from \"react-cookie\";\nimport 'semantic-ui-css/semantic.min.css'\nimport {createStore, Store} from 'redux'\nimport {Provider as StoreProvider} from \"react-redux\";\nimport {ApplicationState, rootReducer} from \"./redux/rootReducer\";\nimport {devToolsEnhancer} from \"redux-devtools-extension/index\";\nimport axios from 'axios';\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL\n\nconst store: Store<ApplicationState> = createStore(rootReducer, devToolsEnhancer({}));\n\nReactDOM.render(\n    <React.StrictMode>\n        <CookiesProvider>\n            <StoreProvider store={store}>\n                <App/>\n            </StoreProvider>\n        </CookiesProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}