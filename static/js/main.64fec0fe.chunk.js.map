{"version":3,"sources":["components/Home.tsx","redux/userReducer.ts","components/Zooks.tsx","components/Register.tsx","actions/AuthAction.ts","redux/userActions.ts","redux/loginActionTypes.ts","components/Login.tsx","components/Leagues.tsx","components/Trial.tsx","components/LoadingZookImage.tsx","components/Zook.tsx","components/Upload.tsx","components/League.tsx","components/User.tsx","components/Users.tsx","components/Menu.tsx","App.tsx","serviceWorker.ts","redux/rootReducer.ts","index.tsx"],"names":["Home","UserLoginState","Segment","Group","Header","size","process","Zooks","state","loading","zooks","axios","get","then","response","setState","data","this","Loader","active","inline","zookItems","map","id","name","List","Item","as","Link","to","key","Icon","inverted","Content","divided","selection","Component","initialUserState","LoggedOut","RegisterState","useDispatchLogin","dispatch","useDispatch","token","decodedToken","defaults","headers","common","username","type","useLoginResponseAction","useCookies","setCookie","dispatchLogin","authorizationHeader","authorization","startsWith","Error","exp","bearer","substring","length","jwt_decode","maxAge","Math","floor","Date","now","sameSite","Login","userState","useSelector","user","login","code","useLoginAction","location","useLocation","history","useHistory","URLSearchParams","search","useState","replace","loggingIn","setLoggingIn","useEffect","discordUrl","window","href","Registering","LoggedIn","Leagues","leagues","setLeagues","leagueCard","league","description","Card","Image","src","wrapped","ui","Placeholder","square","Description","Grid","stackable","Row","columns","Column","sprint","high_jump","lap","block_push","hurdles","overall_league","Trial","props","trial","Table","style","extraStyle","Cell","trialName","score","measurement","disqualified","Label","color","position","LoadingZookImage","setLoading","className","onLoad","zookId","alt","overallRowStyle","backgroundColor","Zook","zook","setZook","useParams","clearing","attached","floated","margin","identifier","flex","minWidth","marginBottom","icon","fluid","content","celled","striped","unstackable","HeaderCell","colSpan","Body","about","owner","dateCreated","dateUploaded","physical","height","width","weight","components","achievement","blockPush","highJump","overall","Upload","setZookId","fileValid","setFileValid","FormData","formData","setFormData","uploadError","setUploadError","compact","error","Form","onSubmit","post","catch","Field","onChange","event","file","target","files","item","undefined","endsWith","append","accept","Message","header","disabled","League","setLeague","loader","title","secondary","paddingTop","paddingBottom","updatedAt","basic","selectable","collapsing","entries","display","verticalAlign","User","setUser","signUpAt","lastLoginAt","Users","users","userItems","Register","availability","setAvailability","checkLoading","setCheckLoading","setUsername","usernameValid","setUsernameValid","register","useRegisterAction","Available","success","UnAvailable","widths","onClick","available","Input","label","value","e","test","hidden","zookRegex","Menu","logout","removeCookie","useLogoutAction","Container","activeClassName","exact","padding","paddingLeft","isActive","_","pathname","primary","loginState","App","loginLoad","cookies","useLoginLoadAction","isRegistering","path","component","render","Boolean","hostname","match","rootReducer","combineReducers","action","baseURL","store","createStore","devToolsEnhancer","ReactDOM","StrictMode","CookiesProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.64fec0fe.chunk.js","sourcesContent":["import React from 'react';\nimport {Header, Segment} from \"semantic-ui-react\";\n\nfunction Home() {\n    return (\n        <Segment.Group>\n            <Segment>\n                <Header size=\"huge\">\n                    Welcome To ZookLabs!\n                </Header>\n                {process.env.REACT_APP_WELCOME_MESSAGE}\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nexport default Home;\n","import {LOGIN, LoginActionTypes, LOGOUT, REGISTER} from \"./loginActionTypes\";\n\n\nexport enum UserLoginState {\n    LoggedOut,\n    LoggedIn,\n    Registering\n}\n\ninterface State {\n    state: UserLoginState\n}\n\ninterface LoggedIn extends State {\n    username: string\n    state: UserLoginState.LoggedIn\n}\n\n\ninterface LoggedOut extends State {\n    state: UserLoginState.LoggedOut\n}\n\ninterface Registering extends State {\n    state: UserLoginState.Registering\n}\n\nexport type UserState = LoggedIn | LoggedOut | Registering\n\nexport const isLoggedIn = (userState: UserState) => {\n    return userState.state === UserLoginState.LoggedIn\n}\n\nexport const isRegistering = (userState: UserState) => {\n    return userState.state === UserLoginState.Registering\n}\n\nexport const isLoggedOut = (userState: UserState) => {\n    return userState.state === UserLoginState.LoggedOut\n}\n\n\nexport const initialUserState: UserState = {\n    state: UserLoginState.LoggedOut\n}\n\nexport function userReducer(\n    state = initialUserState,\n    action: LoginActionTypes\n):  UserState {\n    switch (action.type) {\n        case LOGIN:\n            return {\n                state: UserLoginState.LoggedIn,\n                username: action.username\n            }\n        case REGISTER:\n            return {\n                state: UserLoginState.Registering\n            }\n        case LOGOUT:\n            return {\n                state: UserLoginState.LoggedOut\n            }\n        default:\n            return state\n    }\n}","import React, {Component} from 'react';\nimport {Header, Icon, List, Loader, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport {TZookIdentifier} from \"../types/TZookIdentifier\";\nimport {Link} from \"react-router-dom\";\n\ninterface IZooksProps {\n\n}\n\ninterface IZooksState {\n    loading: boolean\n    zooks: TZookIdentifier[],\n}\n\nexport default class Zooks extends Component<IZooksProps,IZooksState> {\n    state = {\n        loading: true,\n        zooks: []\n    }\n\n    async componentDidMount() {\n        axios.get<TZookIdentifier[]>('/zooks').then(response =>\n            this.setState({\n                loading: false,\n                zooks: response.data\n            })\n        )\n    }\n\n    render() {\n        if (this.state.loading) {\n            return <Loader active inline='centered'/>;\n        } else {\n            const zookItems = this.state.zooks.map(({id, name}) => (\n                <List.Item as={Link} to={`/zooks/${id}`} key={id}>\n                    <Icon name='bug' inverted/>\n                    <List.Content>\n                        <List.Header>{id} - <b>{name}</b></List.Header>\n                    </List.Content>\n                </List.Item>\n            ))\n            return (\n                <Segment.Group>\n                    <Segment>\n                        <Header size=\"huge\">\n                            Zooks\n                        </Header>\n                    </Segment>\n                    <Segment>\n                        <List divided selection size='large'>\n                            {zookItems}\n                        </List>\n                    </Segment>\n                </Segment.Group>\n            )\n        }\n    }\n}","import React, {FC, useState} from \"react\";\nimport {Button, Form, Header, Icon, Message, Segment, Table} from \"semantic-ui-react\";\nimport axios, {AxiosError, AxiosResponse} from \"axios\";\nimport {useRegisterAction} from \"../actions/AuthAction\";\n\ntype TAvailability = {\n    available: boolean\n}\n\nenum RegisterState {\n    Available,\n    UnAvailable,\n    Error\n}\n\nconst Register: FC = () => {\n\n    const [availability, setAvailability] = useState<RegisterState>()\n\n    const [loading, setLoading] = useState<boolean>(false)\n    const [checkLoading, setCheckLoading] = useState<boolean>(false)\n\n    const [username, setUsername] = useState<string>(\"\")\n    const [usernameValid, setUsernameValid] = useState<boolean>(false)\n\n\n    const register: (code: string) => Promise<void> = useRegisterAction()\n\n    const usernameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setAvailability(undefined)\n        setUsername(e.target.value)\n        setUsernameValid(/^[A-Za-z0-9_]{3,20}$/.test(e.target.value))\n    }\n\n    const checkAvailability = () => {\n        setCheckLoading(true)\n        axios.get<TAvailability>(`/login/availability/${username}`).then((response: AxiosResponse) => {\n                if (response.data.available) {\n                    setAvailability(RegisterState.Available)\n                } else {\n                    setAvailability(RegisterState.UnAvailable)\n                }\n                setCheckLoading(false)\n            }\n        ).catch((error: AxiosError) => {\n            setAvailability(RegisterState.Error)\n            setCheckLoading(false)\n        })\n    }\n\n    const handleSubmit = () => {\n        setLoading(true)\n        if (availability === RegisterState.Available) {\n            register(username)\n        }\n    }\n\n        return <>\n            <Segment.Group>\n                <Segment clearing attached='top'>\n                    <Header floated=\"left\" size='huge' style={{margin: 0}}>\n                        Register Username\n                    </Header>\n                </Segment>\n                <Segment attached>\n                    <Table compact color=\"orange\" inverted>\n                        <Table.Header>\n                            <Table.Row>\n                                <Table.HeaderCell> <Icon name='attention'/> Username Cannot be\n                                    changed</Table.HeaderCell>\n                            </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            <Table.Row>\n                                <Table.Cell error>\n                                    <Icon name='attention'/>Usernames can be between 3 and 20 characters long.</Table.Cell>\n                            </Table.Row>\n                            <Table.Row>\n                                <Table.Cell error>\n                                    <Icon name='attention'/>Usernames may contain UPPER and lower letters (A-Z,a-z), numbers (0-9) and underscore (_).</Table.Cell>\n                            </Table.Row>\n                        </Table.Body>\n                    </Table>\n                </Segment>\n                <Segment attached>\n                    <Form onSubmit={handleSubmit} success={availability === RegisterState.Available}\n                          error={availability === RegisterState.UnAvailable || availability === RegisterState.Error}\n                          loading={loading}>\n\n                        <Form.Group widths='equal'>\n                            <Button type='button' disabled={!usernameValid} onClick={checkAvailability} loading={checkLoading}>Check Availability</Button>\n                            <Form.Input\n                                label='Username'\n                                value={username}\n                                onChange={usernameChange}\n                                error={!usernameValid || availability === RegisterState.UnAvailable || availability === RegisterState.Error}\n                                loading={checkLoading}\n                            />\n                        </Form.Group>\n\n                        <Message\n                            success\n                            header='Username Is Available'\n                            content=\"REMEMBER YOU CAN ONLY SET THIS ONCE\"\n                        />\n                        <Message\n                            hidden={availability !== RegisterState.UnAvailable}\n                            error\n                            header='Username Not Available'\n                        />\n                        <Message\n                            hidden={availability !== RegisterState.Error || !usernameValid}\n                            error\n                            header='Username Is Invalid'\n                        />\n\n                        <Button type='submit' disabled={availability !== RegisterState.Available}>Submit</Button>\n                    </Form>\n                </Segment>\n            </Segment.Group>\n        </>\n\n}\n\nexport default Register","import jwt_decode from \"jwt-decode\";\nimport {LoginUser, LogoutUser, RegisterUser} from \"../redux/userActions\";\nimport axios, {AxiosResponse} from \"axios\";\nimport {useDispatch} from \"react-redux\";\nimport {useCookies} from \"react-cookie\";\n\ntype JwtToken = {\n    username?: string\n    exp: number\n}\n\nconst getToken = (bearer: string) => bearer.substring(7, bearer.length)\n\nconst maxAge = (exp: number) => exp - Math.floor(Date.now() / 1000)\n\n\nexport const useDispatchLogin = () => {\n    const dispatch = useDispatch()\n    return (token: string, decodedToken: JwtToken) => {\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`\n        if (decodedToken.username) {\n            dispatch(LoginUser(decodedToken.username))\n        } else {\n            dispatch(RegisterUser())\n        }\n    }\n}\n\nexport const useLoginLoadAction = () => {\n    const [cookies] = useCookies(['token'])\n    const dispatchLogin = useDispatchLogin()\n\n    return () => {\n        let token: string | undefined = cookies.token\n        if (token) {\n            let decodedToken = jwt_decode<JwtToken>(token)\n            dispatchLogin(token, decodedToken)\n        }\n    }\n}\n\nexport const useLogoutAction = () => {\n    const dispatch = useDispatch()\n    const [, , removeCookie] = useCookies()\n    return () => {\n        axios.defaults.headers = undefined\n        removeCookie(\"token\")\n        dispatch(LogoutUser())\n    }\n}\n\n\nconst useLoginResponseAction = () => {\n    const [, setCookie] = useCookies()\n    const dispatchLogin = useDispatchLogin()\n\n    return (response: AxiosResponse) => {\n        let authorizationHeader = response.headers.authorization\n        if (authorizationHeader && authorizationHeader.startsWith(\"Bearer \")) {\n\n            let token = getToken(authorizationHeader)\n            let decodedToken = jwt_decode<JwtToken>(token)\n\n            setCookie(\"token\", token, {maxAge: maxAge(decodedToken.exp), sameSite: \"strict\"})\n\n            dispatchLogin(token, decodedToken)\n        } else if (!authorizationHeader) {\n            throw new Error(\"authorization header missing\")\n        } else {\n            throw new Error(\"authorization header does not start with Bearer \")\n        }\n    }\n}\n\nexport const useRegisterAction = () => {\n    const login = useLoginResponseAction()\n    return (username: string) => {\n        return axios.post(`/login/register`, {username: username}).then(login)\n    }\n}\n\nexport const useLoginAction = () => {\n    const login = useLoginResponseAction()\n    return (code: string) => {\n        return axios.get(`/login?code=${code}`).then(login)\n    }\n}\n\n","import {LOGIN, LoginActionTypes, LOGOUT, REGISTER} from \"./loginActionTypes\";\n\n\nexport function LoginUser(username: string): LoginActionTypes {\n  return {\n    type: LOGIN,\n    username: username\n  }\n}\n\nexport function RegisterUser(): LoginActionTypes {\n  return {\n    type: REGISTER\n  }\n}\n\nexport function LogoutUser(): LoginActionTypes {\n  return {\n    type: LOGOUT\n  }\n}","export const LOGIN = 'LOGIN'\nexport const REGISTER = 'REGISTER'\nexport const LOGOUT = 'LOGOUT'\n\ninterface LoginAction {\n  type: typeof LOGIN\n  username: string\n}\n\ninterface RegisterAction {\n  type: typeof REGISTER\n}\n\ninterface LogoutAction {\n  type: typeof LOGOUT\n}\n\nexport type LoginActionTypes = LoginAction | RegisterAction | LogoutAction","import React, {FC, useEffect, useState} from 'react';\nimport {useHistory, useLocation} from \"react-router\";\n\nimport {ApplicationState} from \"../redux/rootReducer\";\nimport {useSelector} from \"react-redux\";\nimport {Loader, Segment} from \"semantic-ui-react\";\nimport {Redirect} from \"react-router-dom\";\nimport {UserLoginState, UserState} from \"../redux/userReducer\";\nimport {useLoginAction} from \"../actions/AuthAction\";\n\nconst Login: FC = () => {\n\n    const userState = useSelector<ApplicationState, UserState>(state => state.user)\n\n    const login: (code: string) => Promise<void> = useLoginAction()\n\n    let location = useLocation()\n    let history = useHistory()\n\n    let code = new URLSearchParams(location.search).get(\"code\")\n\n    let loggingInState = () => {\n        if (code) {\n            history.replace(\"/login\")\n            return true\n        } else {\n            return false\n        }\n    }\n\n    const [loggingIn, setLoggingIn] = useState<boolean>(loggingInState());\n\n    useEffect(() => {\n        if (code) { login(code).then(() => setLoggingIn(false))}\n    }, [code,login])\n\n    if (loggingIn) {\n        return <Segment><Loader active inline='centered'/></Segment>\n    } else {\n        switch (userState.state) {\n            case UserLoginState.LoggedOut:\n                let discordUrl = `https://discord.com/api/oauth2/authorize?client_id=${process.env.REACT_APP_DISCORD_CLIENT_ID}&redirect_uri=${process.env.REACT_APP_DISCORD_CALLBACK_URL}&response_type=code&scope=identify`\n                return <Segment>\n                    <script>{window.location.href = discordUrl}</script>\n                    Redirecting to Discord.\n                    <a href={discordUrl}>Not Redirecting? Click Here!</a>\n                    <Loader active inline='centered'/>\n                </Segment>\n\n            case UserLoginState.Registering:\n                return <Segment><Loader active inline='centered'/></Segment>\n            case UserLoginState.LoggedIn:\n                return <Redirect to={`/users/${userState.username}`}/>\n        }\n    }\n}\n\nexport default Login\n","import React, {FC, useEffect, useState} from \"react\";\nimport {Card, Grid, Header, Image, Placeholder, Segment} from \"semantic-ui-react\";\nimport axios from \"axios\";\nimport {Link} from \"react-router-dom\";\n\ntype TLeagues = {\n    block_push: number\n    sprint: number\n    hurdles: number\n    lap: number\n    high_jump: number\n    overall_league: number\n}\n\nconst Leagues: FC = () => {\n    const [leagues, setLeagues] = useState<TLeagues>()\n\n    useEffect(() => {\n        axios.get<TLeagues>('/leagues').then(response => {\n                setLeagues(response.data)\n            }\n        )\n    }, [])\n\n    let leagueCard = (league: string, id: number | undefined, name: string, description: string) => {\n        return (\n            <Card as={Link} to={`/leagues/${league}`}>\n                {id ? (\n                    <Image src={`${process.env.REACT_APP_STATIC_URL}/image/${id}`} wrapped ui={false}/>\n                ) : (\n                    <Placeholder>\n                        <Placeholder.Image square/>\n                    </Placeholder>\n                )}\n                <Card.Content>\n                    <Card.Header>{name}</Card.Header>\n                    <Card.Description>\n                        {description}\n                    </Card.Description>\n                </Card.Content>\n\n            </Card>\n        )\n    }\n\n    return (\n        <Segment.Group>\n            <Segment>\n                <Header size=\"huge\">\n                    Leagues\n                </Header>\n            </Segment>\n            <Segment>\n                <Grid stackable>\n                    <Grid.Row columns={3}>\n                        <Grid.Column>\n                            {leagueCard('sprint', leagues?.sprint, 'Sprint', 'Which is the fastest Zook in the world? Check the Sprint Trial League.')}\n                        </Grid.Column>\n                        <Grid.Column>\n                            {leagueCard('high_jump', leagues?.high_jump, 'High Jump', 'The Zooks are jumping higher and higher, but which is the highest?')}\n                        </Grid.Column>\n                        <Grid.Column>\n                            {leagueCard('lap', leagues?.lap, 'Single Lap', 'Whose Zook can run a lap faster than all the other Zooks?')}\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row columns={3}>\n                        <Grid.Column>\n                            {leagueCard('block_push', leagues?.block_push, 'Block Push', 'There\\'s some stiff competition in the Block Push Trial League...')}\n                        </Grid.Column>\n                        <Grid.Column>\n                            {leagueCard('hurdles', leagues?.hurdles, 'Hurdles', 'Which Zook does the best at getting over the hurdles?')}\n                        </Grid.Column>\n                        <Grid.Column>\n                            {leagueCard('overall_league', leagues?.overall_league, 'Overall', 'Which Zook is has the best scores across all the leagues?')}\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n\n            </Segment>\n        </Segment.Group>\n    )\n}\n\nexport default Leagues","import React, {FC} from \"react\";\nimport {Label, Table} from \"semantic-ui-react\";\n\nexport type TZookTrial = {\n    score: number\n    position: number\n    disqualified: boolean\n}\n\ntype ITrialProps = {\n    trialName: string\n    trial?: TZookTrial\n    measurement: string\n    extraStyle?: object\n}\n\nconst Trial: FC<ITrialProps> = (props) => {\n    if (props.trial) {\n        const position = (trial: TZookTrial) => {\n            if (trial.disqualified) {\n                return <Label color=\"red\">DISQUALIFIED</Label>\n            } else if (trial.position === 2147483647) {\n                return '--'\n            }\n            return trial.position\n        }\n        return (\n            <Table.Row style={props.extraStyle}>\n                <Table.Cell>{props.trialName}</Table.Cell>\n                <Table.Cell>{props.trial.score} {props.measurement}</Table.Cell>\n                <Table.Cell>{position(props.trial)}</Table.Cell>\n            </Table.Row>\n        )\n    } else {\n        return (\n            <Table.Row>\n                <Table.Cell>{props.trialName}</Table.Cell>\n                <Table.Cell>N/A</Table.Cell>\n                <Table.Cell>N/A</Table.Cell>\n            </Table.Row>\n        )\n    }\n}\n\nexport default Trial\n","import React, {FC, useState} from \"react\";\nimport {Image} from \"semantic-ui-react\";\n\ninterface LoadingZookImageProps {\n    zookId: number,\n    alt?: string\n}\n\nconst LoadingZookImage: FC<LoadingZookImageProps & React.HTMLProps<HTMLDivElement>> = (props) => {\n\n    const [loading, setLoading] = useState<Boolean>(true)\n\n    let loaded = () => {\n        setLoading(false)\n    }\n\n    let imageClass: () => string = () => {\n        if (loading) {\n            return \"square image\"\n        } else {\n            return \"\"\n        }\n    }\n\n    return <>\n        <div {...props} className=\"ui placeholder\" >\n            <Image className={imageClass()} onLoad={loaded}\n                   src={`${process.env.REACT_APP_STATIC_URL}/image/${props.zookId}`} alt={props.alt}/>\n        </div>\n    </>\n\n}\n\nexport default LoadingZookImage","import React, {FC, useEffect, useState} from 'react';\nimport Trial, {TZookTrial} from \"./Trial\";\nimport {Grid, Header, Loader, Segment, Table} from 'semantic-ui-react';\nimport Button from \"semantic-ui-react/dist/commonjs/elements/Button\";\nimport {useParams} from \"react-router\";\nimport axios from 'axios';\nimport {Link} from \"react-router-dom\";\nimport {TZookIdentifier} from \"../types/TZookIdentifier\";\nimport LoadingZookImage from \"./LoadingZookImage\";\n\ntype TZookOwner = {\n    id: string\n    username: string\n}\n\ntype TZookAbout = {\n    owner?: TZookOwner\n    dateCreated: string\n    dateUploaded: string\n}\n\ntype TZookPhysical = {\n    height: number\n    length: number\n    width: number\n    weight: number\n    components: number\n}\n\ntype TZookAchievement = {\n    sprint?: TZookTrial\n    blockPush?: TZookTrial\n    hurdles?: TZookTrial\n    highJump?: TZookTrial\n    lap?: TZookTrial\n    overall?: TZookTrial\n}\n\ntype TZook = {\n    identifier: TZookIdentifier\n    about: TZookAbout\n    physical: TZookPhysical\n    achievement: TZookAchievement\n}\n\ninterface RouteParams {\n    id: string\n}\n\nlet overallRowStyle = {\n    backgroundColor: \"#2185d0\",\n    color: \"#FFF\"\n};\n\nconst Zook: FC = () => {\n    const [zook, setZook] = useState<TZook>();\n    let {id} = useParams<RouteParams>()\n\n    useEffect(() => {\n        axios.get<TZook>(`zooks/${id}`).then(response =>\n            setZook(response.data)\n        )\n    }, [id])\n\n    if (!zook) {\n        return <Loader active inline='centered'/>;\n    } else {\n\n        const owner = () => {\n            if (zook.about.owner) {\n                return (<Table.Cell>\n                    <Link to={`/users/${zook.about.owner.username}`}>{zook.about.owner.username}</Link>\n                </Table.Cell>)\n            } else {\n                return <Table.Cell>Anonymous</Table.Cell>\n            }\n        }\n        return (\n            <Segment.Group>\n                <Segment clearing attached='top'>\n                    <Header floated=\"left\" size='huge' style={{margin: 0}}>\n                        Zook Name: {zook.identifier.name}\n                    </Header>\n                    <Header floated=\"right\" size='huge'>\n                        Zook ID: {zook.identifier.id}\n                    </Header>\n                </Segment>\n                <Segment attached>\n                    <Grid stackable>\n                        <div className=\"two column row ui segment attached\">\n                            <Grid.Column style={{flex: \"0\"}}>\n                                <div style={{minWidth: 256}}>\n                                    <LoadingZookImage zookId={zook.identifier.id} alt={zook.identifier.name}\n                                                      style={{marginBottom: 10}}/>\n                                    <Button color='blue' as=\"a\" icon=\"download\" fluid content=\"Download Zook\"\n                                            href={\"http://static.zooklabs.com/zooks/\" + zook.identifier.id + \"/\" + zook.identifier.name + \".zook\"}/>\n                                </div>\n                            </Grid.Column>\n                            <Grid.Column style={{flex: \"1\"}}>\n                                <Table celled striped unstackable color=\"green\">\n                                    <Table.Header>\n                                        <Table.Row>\n                                            <Table.HeaderCell colSpan='2'>About</Table.HeaderCell>\n                                        </Table.Row>\n                                    </Table.Header>\n                                    <Table.Body>\n                                        <Table.Row>\n                                            <Table.Cell>Owner</Table.Cell>\n                                            {owner()}\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Birth/Adoption date</Table.Cell>\n                                            <Table.Cell>{zook.about.dateCreated}</Table.Cell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Date of Upload</Table.Cell>\n                                            <Table.Cell>{zook.about.dateUploaded}</Table.Cell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Number of Downloads</Table.Cell>\n                                            <Table.Cell>N/A</Table.Cell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Number of times viewed</Table.Cell>\n                                            <Table.Cell>N/A</Table.Cell>\n                                        </Table.Row>\n                                    </Table.Body>\n                                </Table>\n                            </Grid.Column>\n                        </div>\n                        <div className=\"column row ui segment attached\">\n                            <Grid.Column>\n                                <Table celled striped unstackable color=\"green\">\n                                    <Table.Header>\n                                        <Table.Row>\n                                            <Table.HeaderCell colSpan='2'>Physical Information</Table.HeaderCell>\n                                        </Table.Row>\n                                    </Table.Header>\n                                    <Table.Body>\n                                        <Table.Row>\n                                            <Table.Cell>Height</Table.Cell>\n                                            <Table.Cell>{zook.physical.height} cm</Table.Cell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Length</Table.Cell>\n                                            <Table.Cell>{zook.physical.length} cm</Table.Cell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Width</Table.Cell>\n                                            <Table.Cell>{zook.physical.width} cm</Table.Cell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Weight</Table.Cell>\n                                            <Table.Cell>{zook.physical.weight} kg</Table.Cell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Components</Table.Cell>\n                                            <Table.Cell>{zook.physical.components}</Table.Cell>\n                                        </Table.Row>\n                                    </Table.Body>\n                                </Table>\n                                <Table celled striped unstackable color=\"green\">\n                                    <Table.Header>\n                                        <Table.Row>\n                                            <Table.HeaderCell colSpan={3}>Achievements</Table.HeaderCell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.HeaderCell>Trial</Table.HeaderCell>\n                                            <Table.HeaderCell>Result</Table.HeaderCell>\n                                            <Table.HeaderCell>Position</Table.HeaderCell>\n                                        </Table.Row>\n                                    </Table.Header>\n                                    <Table.Body>\n                                        <Trial trial={zook.achievement.sprint} trialName=\"Sprint\"\n                                               measurement=\"cm/sec\"/>\n                                        <Trial trial={zook.achievement.blockPush} trialName=\"Block Push\"\n                                               measurement=\"cm\"/>\n                                        <Trial trial={zook.achievement.hurdles} trialName=\"Hurdles\"\n                                               measurement=\"cm/sec\"/>\n                                        <Trial trial={zook.achievement.highJump} trialName=\"High Jump\"\n                                               measurement=\"cm\"/>\n                                        <Trial trial={zook.achievement.lap} trialName=\"Lap\"\n                                               measurement=\"sec\"/>\n                                        <Trial trial={zook.achievement.overall} trialName=\"Overall\"\n                                               measurement=\"\" extraStyle={overallRowStyle}/>\n                                    </Table.Body>\n                                </Table>\n                            </Grid.Column>\n                        </div>\n                    </Grid>\n                </Segment>\n            </Segment.Group>\n        )\n    }\n}\n\nexport default Zook","import React, {FC, useState} from 'react'\nimport {Button, Form, Header, Icon, Message, Segment, Table} from 'semantic-ui-react'\nimport {Redirect} from 'react-router-dom';\nimport axios, {AxiosError} from \"axios\";\n\ntype TUploadResponse = {\n    id: number\n}\n\ntype TUploadError = {\n    error: string\n}\n\nconst Upload: FC = () => {\n    const [zookId, setZookId] = useState<number>()\n    const [loading, setLoading] = useState<boolean>(false)\n    const [fileValid, setFileValid] = useState<boolean>(false)\n\n    const [formData, setFormData] = useState<FormData>(new FormData())\n\n    const [uploadError, setUploadError] = useState<string>()\n\n\n    const handleSubmit = () => {\n        if (formData.get('zook')) {\n            setLoading(true)\n            axios.post<TUploadResponse>('/zooks/upload', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            }).then(response => {\n                    setZookId(response.data.id)\n                    setLoading(false)\n                }\n            ).catch((error: AxiosError<TUploadError>) => {\n                if (error.response) {\n                    setUploadError(error.response.data.error)\n                    setFileValid(false)\n                    setLoading(false)\n\n                } else {\n                    throw error\n                }\n            })\n        }\n    }\n\n    const fileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let file = event.target.files?.item(0)\n        setUploadError(undefined)\n        if (file && file.name.endsWith(\".zook\")) {\n            const formData = new FormData()\n            formData.append('zook', file)\n            setFormData(formData)\n            setFileValid(true)\n        } else {\n            setFileValid(false)\n        }\n    }\n\n    if (zookId) {\n        return <Redirect to={`/zooks/${zookId}`}/>\n    } else {\n        return (\n            <Segment.Group>\n                <Segment>\n                    <Header size='huge'>\n                        Zook Upload\n                    </Header>\n                </Segment>\n                <Segment>\n                    <Table compact color=\"orange\" inverted>\n                        <Table.Header>\n                            <Table.Row>\n                                <Table.HeaderCell><Icon name='attention'/> Upload Requirements</Table.HeaderCell>\n                            </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            <Table.Row>\n                                <Table.Cell error>\n                                    <Icon name='attention'/>Must have a Passport Photo</Table.Cell>\n                            </Table.Row>\n                            <Table.Row>\n                                <Table.Cell error>\n                                    <Icon name='attention'/>Does not support Street Rules</Table.Cell>\n                            </Table.Row>\n                        </Table.Body>\n                    </Table>\n                </Segment>\n                <Segment>\n                    <Form onSubmit={handleSubmit} loading={loading} error={!!uploadError}>\n                        <Form.Field error={!!uploadError}>\n                            <label>Zook File</label>\n                            <input type='file'\n                                   onChange={fileChange}\n                                   accept=\".zook\"/>\n                        </Form.Field>\n                        <Message\n                            error\n                            header={uploadError}\n                        />\n                        <Button type=\"submit\" color='blue' icon=\"upload\" disabled={!fileValid} content=\"Upload Zook\"/>\n                    </Form>\n                </Segment>\n            </Segment.Group>\n        )\n    }\n}\n\nexport default Upload","import React, {FC, useEffect, useState} from \"react\"\nimport {Header, Image, Loader, Segment, Table} from \"semantic-ui-react\"\nimport axios from 'axios';\n\ntype TLeagueEntry = {\n    zookId: number\n    name: string\n    score: number\n    position: number\n}\n\ntype TLeague = {\n    updatedAt: string\n    entries: TLeagueEntry[]\n}\n\n\ninterface ILeagueProps {\n    league: string\n    title: string\n    measurement: string\n}\n\nconst League: FC<ILeagueProps> = (props) => {\n\n    const [league, setLeague] = useState<TLeague>()\n\n    useEffect(() => {\n        axios.get<TLeague>(`/leagues/${props.league}`).then(response => {\n            setLeague(response.data)\n        })\n    }, [props.league])\n\n    const zookItems = (league: TLeague) => league.entries.map(({zookId, name, score, position}) => (\n        <Table.Row key={zookId}>\n            <Table.Cell><b>{position === 2147483647 ? '--' : position}</b></Table.Cell>\n            <Table.Cell><b>{score}&nbsp;{props.measurement}</b></Table.Cell>\n            <a href={\"/zooks/\" + zookId}\n               style={{display: 'contents', color: \"rgba(0,0,0,.87)\", verticalAlign: \"middle\"}}>\n                <Table.Cell>\n                    <b>{name}</b>\n                </Table.Cell>\n            </a>\n            <Table.Cell>\n                {\n                    position < 6 ?\n                        <Image src={`${process.env.REACT_APP_STATIC_URL}/image/${zookId}`}\n                               size={position === 1 ? \"small\" : \"tiny\"}/> : null\n                }\n            </Table.Cell>\n        </Table.Row>\n    ))\n\n    const loader = <Loader active inline='centered'/>\n\n    return <>\n        <Segment.Group>\n            <Segment>\n                <Header size=\"huge\">\n                    {props.title} League\n                </Header>\n            </Segment>\n            <Segment secondary inverted size='tiny' style={{paddingTop: \"6px\", paddingBottom: \"6px\"}}>\n                <b>Updated : {league?.updatedAt}</b>\n            </Segment>\n            <Segment>\n                <Table basic='very' selectable unstackable>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell collapsing>Position</Table.HeaderCell>\n                            <Table.HeaderCell collapsing>Score</Table.HeaderCell>\n                            <Table.HeaderCell collapsing>Zook</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {league ? zookItems(league) : loader}\n                    </Table.Body>\n                </Table>\n            </Segment>\n        </Segment.Group>\n    </>\n\n\n}\n\nexport default League","import React, {FC, useEffect, useState} from \"react\";\nimport {useHistory, useParams} from \"react-router\";\nimport {Header, Icon, List, Loader, Segment, Table} from \"semantic-ui-react\";\nimport axios from \"axios\";\nimport {TZookIdentifier} from \"../types/TZookIdentifier\";\nimport {TUserIdentifier} from \"../types/TUserIdentifier\";\nimport {Link} from \"react-router-dom\";\n\ntype TUserAbout = {\n    signUpAt: string\n    lastLoginAt: string\n}\n\ntype TUser = {\n    identifier: TUserIdentifier,\n    about: TUserAbout,\n    zooks: TZookIdentifier[]\n}\n\ninterface RouteParams {\n    username: string\n}\n\nconst User: FC = () => {\n    let {username} = useParams<RouteParams>()\n    let history = useHistory()\n\n    const [user, setUser] = useState<TUser>();\n\n    useEffect(() => {\n        axios.get<TUser>(`users/${username}`).then(response => {\n                history.replace(response.data.identifier.username)\n                setUser(response.data)\n            }\n        )\n    }, [username, history])\n\n\n    if (user) {\n        const zookItems = user.zooks.map(({id, name}) => (\n            <List.Item as={Link} to={`/zooks/${id}`} key={id}>\n                <Icon name='bug' inverted/>\n                <List.Content>\n                    <List.Header>{id} - <b>{name}</b></List.Header>\n                </List.Content>\n            </List.Item>\n        ))\n\n\n        return <Segment.Group>\n            <Segment clearing attached='top'>\n                <Header floated=\"left\" size='huge' style={{margin: 0}}>\n                    User: {user.identifier.username}\n                </Header>\n            </Segment>\n            <Table attached='top' celled striped unstackable color=\"green\">\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell colSpan='2'>About</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    <Table.Row>\n                        <Table.Cell>Signed Up</Table.Cell>\n                        <Table.Cell>{user.about.signUpAt}</Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>Last Logged In</Table.Cell>\n                        <Table.Cell>{user.about.lastLoginAt}</Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>Uploaded Zooks</Table.Cell>\n                        <Table.Cell>{zookItems.length}</Table.Cell>\n                    </Table.Row>\n                </Table.Body>\n            </Table>\n\n            <Segment attached>\n                <List divided selection size='large'>\n                    {zookItems}\n                </List>\n            </Segment>\n        </Segment.Group>\n    } else {\n\n        return <Segment><Loader active inline='centered'/></Segment>\n    }\n}\n\nexport default User","import React, {Component} from 'react';\nimport {Header, Icon, List, Loader, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport {TUserIdentifier} from \"../types/TUserIdentifier\";\nimport {Link} from \"react-router-dom\";\n\n\ninterface IUsersProps {\n\n}\n\ninterface IUsersState {\n    loading: boolean\n    users: TUserIdentifier[],\n}\n\nexport default class Users extends Component<IUsersProps, IUsersState> {\n    state = {\n        loading: true,\n        users: []\n    }\n\n    async componentDidMount() {\n        axios.get<TUserIdentifier[]>('/users').then(response =>\n            this.setState({\n                loading: false,\n                users: response.data\n            })\n        )\n    }\n\n    render() {\n        if (this.state.loading) {\n            return <Loader active inline='centered'/>;\n        } else {\n            const userItems = this.state.users.map(({username}) => (\n                <List.Item as={Link} to={`/users/${username}`} key={username}>\n                    <Icon name='user' inverted/>\n                    <List.Content>\n                        <List.Header>{username}</List.Header>\n                    </List.Content>\n                </List.Item>\n            ))\n            return (\n                <Segment.Group>\n                    <Segment>\n                        <Header size=\"huge\">\n                            Users\n                        </Header>\n                    </Segment>\n                    <Segment>\n                        <List divided selection size='large'>\n                            {userItems}\n                        </List>\n                    </Segment>\n                </Segment.Group>\n            )\n        }\n    }\n}","import React, {FC} from 'react'\nimport {Button, Container, Icon, Menu as SMenu} from 'semantic-ui-react'\nimport {NavLink} from \"react-router-dom\";\nimport {UserLoginState, UserState} from \"../redux/userReducer\";\nimport {useSelector} from \"react-redux\";\nimport {ApplicationState} from \"../redux/rootReducer\";\nimport {useLogoutAction} from \"../actions/AuthAction\";\n\n\nconst zookRegex = /^\\/zooks\\/?\\d*$/\n\nconst Menu: FC = () => {\n\n    const userState = useSelector<ApplicationState, UserState>(state => state.user)\n\n    const logout = useLogoutAction()\n\n    const loginState = () => {\n\n        switch (userState.state) {\n            case UserLoginState.LoggedIn:\n                let username = userState.username\n                return <SMenu.Menu position='right'>\n                    <NavLink to={`/users/${username}`} activeClassName=\"active\" className=\"item\"\n                             isActive={(_, {pathname}) => {\n                                 return `/users/${username}` === pathname\n                             }}\n                    >{username}</NavLink>\n                    <SMenu.Item>\n                        <Button active={true} onClick={logout} primary>Logout</Button>\n                    </SMenu.Item>\n                </SMenu.Menu>\n\n            case UserLoginState.LoggedOut:\n                return <SMenu.Menu position='right'>\n                    <SMenu.Item>\n                        <NavLink to=\"/login\" activeClassName=\"active\" className=\"ui primary button\">Login</NavLink>\n                    </SMenu.Item>\n                </SMenu.Menu>\n\n            case UserLoginState.Registering:\n                return <SMenu.Menu position='right'>\n                    <SMenu.Item>\n                        <Button active={true} onClick={logout} color='red' primary>Cancel</Button>\n                    </SMenu.Item>\n                </SMenu.Menu>\n        }\n    }\n\n\n    return (\n        <Container>\n            <SMenu>\n                <NavLink to=\"/\" activeClassName=\"active\" className=\"item\" exact={true} style={{padding: 10}}>\n                    <img src={`${process.env.PUBLIC_URL}/logo.png`} alt={\"logo\"}/><b\n                    style={{paddingLeft: 10}}>ZookLabs</b></NavLink>\n                <NavLink to=\"/zooks\" activeClassName=\"active\" className=\"item\"\n                         isActive={(_, {pathname}) => {\n                             return zookRegex.test(pathname)\n                         }}\n                >Zooks</NavLink>\n                <NavLink to=\"/leagues\" activeClassName=\"active\" className=\"item\">Leagues</NavLink>\n                <NavLink to=\"/zooks/upload\" activeClassName=\"active\" className=\"item\" exact={true}>Upload</NavLink>\n                <NavLink to=\"/users\" activeClassName=\"active\" className=\"item\">Users</NavLink>\n                {loginState()}\n                <a className=\"discord item\" href=\"http://discord.zooklabs.com\"><Icon name='discord'\n                                                                                     inverted/>Discord</a>\n            </SMenu>\n        </Container>\n    )\n}\n\nexport default Menu\n","import React, {FC, useEffect} from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Redirect, Route, Switch} from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport Zooks from \"./components/Zooks\";\nimport Login from \"./components/Login\";\nimport Leagues from \"./components/Leagues\";\nimport Zook from \"./components/Zook\";\nimport Upload from \"./components/Upload\";\nimport League from \"./components/League\";\nimport {useSelector} from \"react-redux\";\nimport User from \"./components/User\";\nimport Users from \"./components/Users\";\nimport Register from \"./components/Register\";\nimport {ApplicationState} from \"./redux/rootReducer\";\nimport {isRegistering, UserState} from \"./redux/userReducer\";\nimport {useLoginLoadAction} from \"./actions/AuthAction\";\nimport Menu from \"./components/Menu\";\nimport {Container} from \"semantic-ui-react\";\n\nconst App: FC = () => {\n\n    const userState = useSelector<ApplicationState, UserState>(state => state.user)\n\n    const loginLoad = useLoginLoadAction()\n\n    useEffect(loginLoad, []);\n\n    let registering = () => {\n        return <>\n            <Switch>\n                <Route path=\"/login\" exact component={Register}/>\n                <Redirect to=\"/login\"/>\n            </Switch>\n        </>\n    }\n\n    let routes = () => {\n        return <>\n            <Switch>\n                <Route path=\"/\" exact component={Home}/>\n                <Route path=\"/login\" exact component={Login}/>\n\n                <Route path=\"/zooks/upload\" exact component={Upload}/>\n                <Route path=\"/zooks/:id\" component={Zook}/>\n                <Route path=\"/zooks\" exact component={Zooks}/>\n\n                <Route path=\"/users\" exact component={Users}/>\n                <Route path=\"/users/:username\" component={User}/>\n\n                <Route path=\"/leagues\" exact component={Leagues}/>\n                <Route path=\"/leagues/sprint\"\n                       render={props => <League {...props} league=\"sprint\" title=\"Sprint\"\n                                                measurement=\"cm/sec\"/>}/>\n                <Route path=\"/leagues/block_push\"\n                       render={props => <League {...props} league=\"block_push\" title=\"Block Push\"\n                                                measurement=\"cm\"/>}/>\n                <Route path=\"/leagues/hurdles\"\n                       render={props => <League {...props} league=\"hurdles\" title=\"Hurdles\"\n                                                measurement=\"cm/sec\"/>}/>\n                <Route path=\"/leagues/high_jump\"\n                       render={props => <League {...props} league=\"high_jump\" title=\"High Jump\"\n                                                measurement=\"cm\"/>}/>\n                <Route path=\"/leagues/lap\"\n                       render={props => <League {...props} league=\"lap\" title=\"Lap\"\n                                                measurement=\"sec\"/>}/>\n\n                <Route path=\"/leagues/overall_league\"\n                       render={props => <League {...props} league=\"overall_league\" title=\"Overall\"\n                                                measurement=\"\"/>}/>\n                <Redirect to=\"/\"/>\n            </Switch>\n        </>\n    }\n\n\n    return (\n        <Router>\n            <Menu/>\n            <Container>\n                {isRegistering(userState) ? registering() : routes()}\n            </Container>\n        </Router>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux'\nimport {userReducer, initialUserState, UserState} from \"./userReducer\";\n\nexport interface ApplicationState {\n  user: UserState\n}\n\nexport const initialState: ApplicationState = {\n    user: initialUserState\n};\n\n\nexport const rootReducer = combineReducers<ApplicationState>({\n  user: userReducer\n})\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {CookiesProvider} from \"react-cookie\";\nimport 'semantic-ui-css/semantic.min.css'\nimport {createStore, Store} from 'redux'\nimport {Provider as StoreProvider} from \"react-redux\";\nimport {ApplicationState, rootReducer} from \"./redux/rootReducer\";\nimport {devToolsEnhancer} from \"redux-devtools-extension/index\";\nimport axios from 'axios';\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL\n\nconst store: Store<ApplicationState> = createStore(rootReducer, devToolsEnhancer({}));\n\nReactDOM.render(\n    <React.StrictMode>\n        <CookiesProvider>\n            <StoreProvider store={store}>\n                <App/>\n            </StoreProvider>\n        </CookiesProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}