{"version":3,"sources":["redux/loginActionTypes.ts","components/Register.tsx","actions/AuthAction.ts","redux/userActions.ts","redux/userReducer.ts","components/Home.tsx","components/Login.tsx","components/League.tsx","components/Leagues.tsx","components/Users.tsx","components/Trial.tsx","components/LoadingZookImage.tsx","components/Zook.tsx","components/Upload.tsx","components/Zooks.tsx","components/Admin.tsx","components/Menu.tsx","components/User.tsx","App.tsx","serviceWorker.ts","redux/rootReducer.ts","index.tsx"],"names":["LOGIN","REGISTER","LOGOUT","RegisterState","useDispatchLogin","dispatch","useDispatch","token","decodedToken","username","axios","defaults","headers","common","type","useLogoutAction","useCookies","removeCookie","undefined","useLoginResponseAction","setCookie","dispatchLogin","response","authorizationHeader","authorization","startsWith","Error","exp","bearer","substring","length","jwt_decode","maxAge","Math","floor","Date","now","sameSite","UserLoginState","Register","useState","availability","setAvailability","loading","setLoading","checkLoading","setCheckLoading","setUsername","usernameValid","setUsernameValid","register","login","post","then","useRegisterAction","Segment","Group","clearing","attached","Header","floated","size","style","margin","Table","compact","color","inverted","Row","HeaderCell","Icon","name","Body","Cell","error","Form","onSubmit","Available","success","UnAvailable","widths","Button","disabled","onClick","get","data","available","catch","Input","label","onChange","e","target","value","test","Message","header","content","hidden","isRegistering","userState","state","Registering","initialUserState","LoggedOut","Home","process","Login","useSelector","user","code","useLoginAction","location","useLocation","history","useHistory","URLSearchParams","search","replace","loggingIn","setLoggingIn","useEffect","Loader","active","inline","discordUrl","window","href","LoggedIn","to","League","props","league","setLeague","loader","title","secondary","paddingTop","paddingBottom","updatedAt","basic","selectable","unstackable","collapsing","entries","map","zookId","score","position","measurement","display","verticalAlign","Image","src","zookItems","Leagues","leagues","setLeagues","leagueCard","id","description","Card","as","Link","wrapped","ui","Placeholder","square","Content","Description","Grid","stackable","columns","Column","sprint","high_jump","lap","block_push","hurdles","overall_league","Users","users","a","setState","this","userItems","List","Item","divided","selection","Component","Trial","trial","extraStyle","trialName","disqualified","Label","LoadingZookImage","className","onLoad","alt","overallRowStyle","backgroundColor","Zook","zook","setZook","useParams","withCredentials","identifier","flex","minWidth","marginBottom","icon","fluid","celled","striped","colSpan","about","owner","dateCreated","dateUploaded","downloads","views","physical","height","width","weight","components","achievement","blockPush","highJump","overall","Upload","setZookId","fileValid","setFileValid","FormData","formData","setFormData","uploadError","setUploadError","Field","event","file","files","item","endsWith","append","accept","Zooks","zooks","Admin","setUsers","ownerSetZookId","setOwnerSetZookId","ownerSetOwner","setOwnerSetOwner","updateOwnerResponse","setUpdateOwnerResponse","patch","placeholder","inputMode","Dropdown","clearable","options","text","status","JSON","stringify","zookRegex","Menu","logout","Container","activeClassName","exact","padding","paddingLeft","isActive","_","pathname","primary","loginState","User","setUser","signUpAt","lastLoginAt","App","loginLoad","cookies","useLoginLoadAction","path","component","render","Boolean","hostname","match","rootReducer","combineReducers","action","baseURL","store","createStore","devToolsEnhancer","ReactDOM","StrictMode","CookiesProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.8b630d6c.chunk.js","sourcesContent":["export const LOGIN = 'LOGIN'\nexport const REGISTER = 'REGISTER'\nexport const LOGOUT = 'LOGOUT'\n\ninterface LoginAction {\n  type: typeof LOGIN\n  username: string\n}\n\ninterface RegisterAction {\n  type: typeof REGISTER\n}\n\ninterface LogoutAction {\n  type: typeof LOGOUT\n}\n\nexport type LoginActionTypes = LoginAction | RegisterAction | LogoutAction","import React, {FC, useState} from \"react\";\nimport {Button, Form, Header, Icon, Message, Segment, Table} from \"semantic-ui-react\";\nimport axios, {AxiosError, AxiosResponse} from \"axios\";\nimport {useRegisterAction} from \"../actions/AuthAction\";\n\ntype TAvailability = {\n    available: boolean\n}\n\nenum RegisterState {\n    Available,\n    UnAvailable,\n    Error\n}\n\nconst Register: FC = () => {\n\n    const [availability, setAvailability] = useState<RegisterState>()\n\n    const [loading, setLoading] = useState<boolean>(false)\n    const [checkLoading, setCheckLoading] = useState<boolean>(false)\n\n    const [username, setUsername] = useState<string>(\"\")\n    const [usernameValid, setUsernameValid] = useState<boolean>(false)\n\n\n    const register: (code: string) => Promise<void> = useRegisterAction()\n\n    const usernameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setAvailability(undefined)\n        setUsername(e.target.value)\n        setUsernameValid(/^[A-Za-z0-9_]{3,20}$/.test(e.target.value))\n    }\n\n    const checkAvailability = () => {\n        setCheckLoading(true)\n        axios.get<TAvailability>(`/login/availability/${username}`).then((response: AxiosResponse) => {\n                if (response.data.available) {\n                    setAvailability(RegisterState.Available)\n                } else {\n                    setAvailability(RegisterState.UnAvailable)\n                }\n                setCheckLoading(false)\n            }\n        ).catch((error: AxiosError) => {\n            setAvailability(RegisterState.Error)\n            setCheckLoading(false)\n        })\n    }\n\n    const handleSubmit = () => {\n        setLoading(true)\n        if (availability === RegisterState.Available) {\n            register(username)\n        }\n    }\n\n        return <>\n            <Segment.Group>\n                <Segment clearing attached='top'>\n                    <Header floated=\"left\" size='huge' style={{margin: 0}}>\n                        Register Username\n                    </Header>\n                </Segment>\n                <Segment attached>\n                    <Table compact color=\"orange\" inverted>\n                        <Table.Header>\n                            <Table.Row>\n                                <Table.HeaderCell> <Icon name='attention'/> Username Cannot be\n                                    changed</Table.HeaderCell>\n                            </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            <Table.Row>\n                                <Table.Cell error>\n                                    <Icon name='attention'/>Usernames can be between 3 and 20 characters long.</Table.Cell>\n                            </Table.Row>\n                            <Table.Row>\n                                <Table.Cell error>\n                                    <Icon name='attention'/>Usernames may contain UPPER and lower letters (A-Z,a-z), numbers (0-9) and underscore (_).</Table.Cell>\n                            </Table.Row>\n                        </Table.Body>\n                    </Table>\n                </Segment>\n                <Segment attached>\n                    <Form onSubmit={handleSubmit} success={availability === RegisterState.Available}\n                          error={availability === RegisterState.UnAvailable || availability === RegisterState.Error}\n                          loading={loading}>\n\n                        <Form.Group widths='equal'>\n                            <Button type='button' disabled={!usernameValid} onClick={checkAvailability} loading={checkLoading}>Check Availability</Button>\n                            <Form.Input\n                                label='Username'\n                                // value={username}\n                                onChange={usernameChange}\n                                error={!usernameValid || availability === RegisterState.UnAvailable || availability === RegisterState.Error}\n                                loading={checkLoading}\n                            />\n                        </Form.Group>\n\n                        <Message\n                            success\n                            header='Username Is Available'\n                            content=\"REMEMBER YOU CAN ONLY SET THIS ONCE\"\n                        />\n                        <Message\n                            hidden={availability !== RegisterState.UnAvailable}\n                            error\n                            header='Username Not Available'\n                        />\n                        <Message\n                            hidden={availability !== RegisterState.Error || !usernameValid}\n                            error\n                            header='Username Is Invalid'\n                        />\n\n                        <Button type='submit' disabled={availability !== RegisterState.Available}>Submit</Button>\n                    </Form>\n                </Segment>\n            </Segment.Group>\n        </>\n\n}\n\nexport default Register","import jwt_decode from \"jwt-decode\";\nimport {LoginUser, LogoutUser, RegisterUser} from \"../redux/userActions\";\nimport axios, {AxiosResponse} from \"axios\";\nimport {useDispatch} from \"react-redux\";\nimport {useCookies} from \"react-cookie\";\n\ntype JwtToken = {\n    username?: string\n    exp: number\n}\n\nconst getToken = (bearer: string) => bearer.substring(7, bearer.length)\n\nconst maxAge = (exp: number) => exp - Math.floor(Date.now() / 1000)\n\n\nexport const useDispatchLogin = () => {\n    const dispatch = useDispatch()\n    return (token: string, decodedToken: JwtToken) => {\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`\n        if (decodedToken.username) {\n            dispatch(LoginUser(decodedToken.username))\n        } else {\n            dispatch(RegisterUser())\n        }\n    }\n}\n\nexport const useLoginLoadAction = () => {\n    const [cookies] = useCookies(['token'])\n    const dispatchLogin = useDispatchLogin()\n\n    return () => {\n        let token: string | undefined = cookies.token\n        if (token) {\n            let decodedToken = jwt_decode<JwtToken>(token)\n            dispatchLogin(token, decodedToken)\n        }\n    }\n}\n\nexport const useLogoutAction = () => {\n    const dispatch = useDispatch()\n    const [, , removeCookie] = useCookies()\n    return () => {\n        axios.defaults.headers = undefined\n        removeCookie(\"token\")\n        dispatch(LogoutUser())\n    }\n}\n\n\nconst useLoginResponseAction = () => {\n    const [, setCookie] = useCookies()\n    const dispatchLogin = useDispatchLogin()\n\n    return (response: AxiosResponse) => {\n        let authorizationHeader = response.headers.authorization\n        if (authorizationHeader && authorizationHeader.startsWith(\"Bearer \")) {\n\n            let token = getToken(authorizationHeader)\n            let decodedToken = jwt_decode<JwtToken>(token)\n\n            setCookie(\"token\", token, {maxAge: maxAge(decodedToken.exp), sameSite: \"strict\"})\n\n            dispatchLogin(token, decodedToken)\n        } else if (!authorizationHeader) {\n            throw new Error(\"authorization header missing\")\n        } else {\n            throw new Error(\"authorization header does not start with Bearer \")\n        }\n    }\n}\n\nexport const useRegisterAction = () => {\n    const login = useLoginResponseAction()\n    return (username: string) => {\n        return axios.post(`/login/register`, {username: username}).then(login)\n    }\n}\n\nexport const useLoginAction = () => {\n    const login = useLoginResponseAction()\n    return (code: string) => {\n        return axios.get(`/login?code=${code}`).then(login)\n    }\n}\n\n","import {LOGIN, LoginActionTypes, LOGOUT, REGISTER} from \"./loginActionTypes\";\n\n\nexport function LoginUser(username: string): LoginActionTypes {\n  return {\n    type: LOGIN,\n    username: username\n  }\n}\n\nexport function RegisterUser(): LoginActionTypes {\n  return {\n    type: REGISTER\n  }\n}\n\nexport function LogoutUser(): LoginActionTypes {\n  return {\n    type: LOGOUT\n  }\n}","import {LOGIN, LoginActionTypes, LOGOUT, REGISTER} from \"./loginActionTypes\";\n\n\nexport enum UserLoginState {\n    LoggedOut,\n    LoggedIn,\n    Registering\n}\n\ninterface State {\n    state: UserLoginState\n}\n\ninterface LoggedIn extends State {\n    username: string\n    state: UserLoginState.LoggedIn\n}\n\n\ninterface LoggedOut extends State {\n    state: UserLoginState.LoggedOut\n}\n\ninterface Registering extends State {\n    state: UserLoginState.Registering\n}\n\nexport type UserState = LoggedIn | LoggedOut | Registering\n\nexport const isLoggedIn = (userState: UserState) => {\n    return userState.state === UserLoginState.LoggedIn\n}\n\nexport const isRegistering = (userState: UserState) => {\n    return userState.state === UserLoginState.Registering\n}\n\nexport const isLoggedOut = (userState: UserState) => {\n    return userState.state === UserLoginState.LoggedOut\n}\n\n\nexport const initialUserState: UserState = {\n    state: UserLoginState.LoggedOut\n}\n\nexport function userReducer(\n    state = initialUserState,\n    action: LoginActionTypes\n):  UserState {\n    switch (action.type) {\n        case LOGIN:\n            return {\n                state: UserLoginState.LoggedIn,\n                username: action.username\n            }\n        case REGISTER:\n            return {\n                state: UserLoginState.Registering\n            }\n        case LOGOUT:\n            return {\n                state: UserLoginState.LoggedOut\n            }\n        default:\n            return state\n    }\n}","import React from 'react';\nimport {Header, Segment} from \"semantic-ui-react\";\n\nfunction Home() {\n    return (\n        <Segment.Group>\n            <Segment>\n                <Header size=\"huge\">\n                    Welcome To ZookLabs!\n                </Header>\n                {process.env.REACT_APP_WELCOME_MESSAGE}\n            </Segment>\n        </Segment.Group>\n    );\n}\n\nexport default Home;\n","import React, {FC, useEffect, useState} from 'react';\nimport {useHistory, useLocation} from \"react-router\";\n\nimport {ApplicationState} from \"../redux/rootReducer\";\nimport {useSelector} from \"react-redux\";\nimport {Loader, Segment} from \"semantic-ui-react\";\nimport {Redirect} from \"react-router-dom\";\nimport {UserLoginState, UserState} from \"../redux/userReducer\";\nimport {useLoginAction} from \"../actions/AuthAction\";\n\nconst Login: FC = () => {\n\n    const userState = useSelector<ApplicationState, UserState>(state => state.user)\n\n    const login: (code: string) => Promise<void> = useLoginAction()\n\n    let location = useLocation()\n    let history = useHistory()\n\n    let code = new URLSearchParams(location.search).get(\"code\")\n\n    let loggingInState = () => {\n        if (code) {\n            history.replace(\"/login\")\n            return true\n        } else {\n            return false\n        }\n    }\n\n    const [loggingIn, setLoggingIn] = useState<boolean>(loggingInState());\n\n    useEffect(() => {\n        if (code) { login(code).then(() => setLoggingIn(false))}\n    }, [code,login])\n\n    if (loggingIn) {\n        return <Segment><Loader active inline='centered'/></Segment>\n    } else {\n        switch (userState.state) {\n            case UserLoginState.LoggedOut:\n                let discordUrl = `https://discord.com/api/oauth2/authorize?client_id=${process.env.REACT_APP_DISCORD_CLIENT_ID}&redirect_uri=${process.env.REACT_APP_DISCORD_CALLBACK_URL}&response_type=code&scope=identify`\n                return <Segment>\n                    <script>{window.location.href = discordUrl}</script>\n                    Redirecting to Discord.\n                    <a href={discordUrl}>Not Redirecting? Click Here!</a>\n                    <Loader active inline='centered'/>\n                </Segment>\n\n            case UserLoginState.Registering:\n                return <Segment><Loader active inline='centered'/></Segment>\n            case UserLoginState.LoggedIn:\n                return <Redirect to={`/users/${userState.username}`}/>\n        }\n    }\n}\n\nexport default Login\n","import React, {FC, useEffect, useState} from \"react\"\nimport {Header, Image, Loader, Segment, Table} from \"semantic-ui-react\"\nimport axios from 'axios';\n\ntype TLeagueEntry = {\n    zookId: number\n    name: string\n    score: number\n    position: number\n}\n\ntype TLeague = {\n    updatedAt: string\n    entries: TLeagueEntry[]\n}\n\n\ninterface ILeagueProps {\n    league: string\n    title: string\n    measurement: string\n}\n\nconst League: FC<ILeagueProps> = (props) => {\n\n    const [league, setLeague] = useState<TLeague>()\n\n    useEffect(() => {\n        axios.get<TLeague>(`/leagues/${props.league}`).then(response => {\n            setLeague(response.data)\n        })\n    }, [props.league])\n\n    const zookItems = (league: TLeague) => league.entries.map(({zookId, name, score, position}) => (\n        <Table.Row key={zookId}>\n            <Table.Cell><b>{position === 2147483647 ? '--' : position}</b></Table.Cell>\n            <Table.Cell><b>{score}&nbsp;{props.measurement}</b></Table.Cell>\n            <a href={\"/zooks/\" + zookId}\n               style={{display: 'contents', color: \"rgba(0,0,0,.87)\", verticalAlign: \"middle\"}}>\n                <Table.Cell>\n                    <b>{name}</b>\n                </Table.Cell>\n            </a>\n            <Table.Cell>\n                {\n                    position < 6 ?\n                        <Image src={`${process.env.REACT_APP_STATIC_URL}/image/${zookId}`}\n                               size={position === 1 ? \"small\" : \"tiny\"}/> : null\n                }\n            </Table.Cell>\n        </Table.Row>\n    ))\n\n    const loader = <Loader active inline='centered'/>\n\n    return <>\n        <Segment.Group>\n            <Segment>\n                <Header size=\"huge\">\n                    {props.title} League\n                </Header>\n            </Segment>\n            <Segment secondary inverted size='tiny' style={{paddingTop: \"6px\", paddingBottom: \"6px\"}}>\n                <b>Updated : {league?.updatedAt}</b>\n            </Segment>\n            <Segment>\n                <Table basic='very' selectable unstackable>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell collapsing>Position</Table.HeaderCell>\n                            <Table.HeaderCell collapsing>Score</Table.HeaderCell>\n                            <Table.HeaderCell collapsing>Zook</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {league ? zookItems(league) : loader}\n                    </Table.Body>\n                </Table>\n            </Segment>\n        </Segment.Group>\n    </>\n\n\n}\n\nexport default League","import React, {FC, useEffect, useState} from \"react\";\nimport {Card, Grid, Header, Image, Placeholder, Segment} from \"semantic-ui-react\";\nimport axios from \"axios\";\nimport {Link} from \"react-router-dom\";\n\ntype TLeagues = {\n    block_push: number\n    sprint: number\n    hurdles: number\n    lap: number\n    high_jump: number\n    overall_league: number\n}\n\nconst Leagues: FC = () => {\n    const [leagues, setLeagues] = useState<TLeagues>()\n\n    useEffect(() => {\n        axios.get<TLeagues>('/leagues').then(response => {\n                setLeagues(response.data)\n            }\n        )\n    }, [])\n\n    let leagueCard = (league: string, id: number | undefined, name: string, description: string) => {\n        return (\n            <Card as={Link} to={`/leagues/${league}`}>\n                {id ? (\n                    <Image src={`${process.env.REACT_APP_STATIC_URL}/image/${id}`} wrapped ui={false}/>\n                ) : (\n                    <Placeholder>\n                        <Placeholder.Image square/>\n                    </Placeholder>\n                )}\n                <Card.Content>\n                    <Card.Header>{name}</Card.Header>\n                    <Card.Description>\n                        {description}\n                    </Card.Description>\n                </Card.Content>\n\n            </Card>\n        )\n    }\n\n    return (\n        <Segment.Group>\n            <Segment>\n                <Header size=\"huge\">\n                    Leagues\n                </Header>\n            </Segment>\n            <Segment>\n                <Grid stackable>\n                    <Grid.Row columns={3}>\n                        <Grid.Column>\n                            {leagueCard('sprint', leagues?.sprint, 'Sprint', 'Which is the fastest Zook in the world? Check the Sprint Trial League.')}\n                        </Grid.Column>\n                        <Grid.Column>\n                            {leagueCard('high_jump', leagues?.high_jump, 'High Jump', 'The Zooks are jumping higher and higher, but which is the highest?')}\n                        </Grid.Column>\n                        <Grid.Column>\n                            {leagueCard('lap', leagues?.lap, 'Single Lap', 'Whose Zook can run a lap faster than all the other Zooks?')}\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row columns={3}>\n                        <Grid.Column>\n                            {leagueCard('block_push', leagues?.block_push, 'Block Push', 'There\\'s some stiff competition in the Block Push Trial League...')}\n                        </Grid.Column>\n                        <Grid.Column>\n                            {leagueCard('hurdles', leagues?.hurdles, 'Hurdles', 'Which Zook does the best at getting over the hurdles?')}\n                        </Grid.Column>\n                        <Grid.Column>\n                            {leagueCard('overall_league', leagues?.overall_league, 'Overall', 'Which Zook is has the best scores across all the leagues?')}\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n\n            </Segment>\n        </Segment.Group>\n    )\n}\n\nexport default Leagues","import React, {Component} from 'react';\nimport {Header, Icon, List, Loader, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport {TUserIdentifier} from \"../types/TUserIdentifier\";\nimport {Link} from \"react-router-dom\";\n\n\ninterface IUsersProps {\n\n}\n\ninterface IUsersState {\n    loading: boolean\n    users: TUserIdentifier[],\n}\n\nexport default class Users extends Component<IUsersProps, IUsersState> {\n    state = {\n        loading: true,\n        users: []\n    }\n\n    async componentDidMount() {\n        axios.get<TUserIdentifier[]>('/users').then(response =>\n            this.setState({\n                loading: false,\n                users: response.data\n            })\n        )\n    }\n\n    render() {\n        if (this.state.loading) {\n            return <Loader active inline='centered'/>;\n        } else {\n            const userItems = this.state.users.map(({username}) => (\n                <List.Item as={Link} to={`/users/${username}`} key={username}>\n                    <Icon name='user' inverted/>\n                    <List.Content>\n                        <List.Header>{username}</List.Header>\n                    </List.Content>\n                </List.Item>\n            ))\n            return (\n                <Segment.Group>\n                    <Segment>\n                        <Header size=\"huge\">\n                            Users\n                        </Header>\n                    </Segment>\n                    <Segment>\n                        <List divided selection size='large'>\n                            {userItems}\n                        </List>\n                    </Segment>\n                </Segment.Group>\n            )\n        }\n    }\n}","import React, {FC} from \"react\";\nimport {Label, Table} from \"semantic-ui-react\";\n\nexport type TZookTrial = {\n    score: number\n    position: number\n    disqualified: boolean\n}\n\ntype ITrialProps = {\n    trialName: string\n    trial?: TZookTrial\n    measurement: string\n    extraStyle?: object\n}\n\nconst Trial: FC<ITrialProps> = (props) => {\n    if (props.trial) {\n        const position = (trial: TZookTrial) => {\n            if (trial.disqualified) {\n                return <Label color=\"red\">DISQUALIFIED</Label>\n            } else if (trial.position === 2147483647) {\n                return '--'\n            }\n            return trial.position\n        }\n        return (\n            <Table.Row style={props.extraStyle}>\n                <Table.Cell>{props.trialName}</Table.Cell>\n                <Table.Cell>{props.trial.score} {props.measurement}</Table.Cell>\n                <Table.Cell>{position(props.trial)}</Table.Cell>\n            </Table.Row>\n        )\n    } else {\n        return (\n            <Table.Row>\n                <Table.Cell>{props.trialName}</Table.Cell>\n                <Table.Cell>N/A</Table.Cell>\n                <Table.Cell>N/A</Table.Cell>\n            </Table.Row>\n        )\n    }\n}\n\nexport default Trial\n","import React, {FC, useState} from \"react\";\nimport {Image} from \"semantic-ui-react\";\n\ninterface LoadingZookImageProps {\n    zookId: number,\n    alt?: string\n}\n\nconst LoadingZookImage: FC<LoadingZookImageProps & React.HTMLProps<HTMLDivElement>> = (props) => {\n\n    const [loading, setLoading] = useState<Boolean>(true)\n\n    let loaded = () => {\n        setLoading(false)\n    }\n\n    let imageClass: () => string = () => {\n        if (loading) {\n            return \"square image\"\n        } else {\n            return \"\"\n        }\n    }\n\n    return <>\n        <div {...props} className=\"ui placeholder\" >\n            <Image className={imageClass()} onLoad={loaded}\n                   src={`${process.env.REACT_APP_STATIC_URL}/image/${props.zookId}`} alt={props.alt}/>\n        </div>\n    </>\n\n}\n\nexport default LoadingZookImage","import React, {FC, useEffect, useState} from 'react';\nimport Trial, {TZookTrial} from \"./Trial\";\nimport {Grid, Header, Loader, Segment, Table} from 'semantic-ui-react';\nimport Button from \"semantic-ui-react/dist/commonjs/elements/Button\";\nimport {useParams} from \"react-router\";\nimport axios from 'axios';\nimport {Link} from \"react-router-dom\";\nimport {TZookIdentifier} from \"../types/TZookIdentifier\";\nimport LoadingZookImage from \"./LoadingZookImage\";\n\ntype TZookOwner = {\n    id: string\n    username: string\n}\n\ntype TZookAbout = {\n    owner?: TZookOwner\n    dateCreated: string\n    dateUploaded: string\n    downloads: number\n    views: number\n}\n\ntype TZookPhysical = {\n    height: number\n    length: number\n    width: number\n    weight: number\n    components: number\n}\n\ntype TZookAchievement = {\n    sprint?: TZookTrial\n    blockPush?: TZookTrial\n    hurdles?: TZookTrial\n    highJump?: TZookTrial\n    lap?: TZookTrial\n    overall?: TZookTrial\n}\n\ntype TZook = {\n    identifier: TZookIdentifier\n    about: TZookAbout\n    physical: TZookPhysical\n    achievement: TZookAchievement\n}\n\ninterface RouteParams {\n    id: string\n}\n\nlet overallRowStyle = {\n    backgroundColor: \"#2185d0\",\n    color: \"#FFF\"\n};\n\nconst Zook: FC = () => {\n    const [zook, setZook] = useState<TZook>();\n    let {id} = useParams<RouteParams>()\n\n    useEffect(() => {\n        axios.get<TZook>(`zooks/${id}`, {withCredentials: true}).then(response =>\n            setZook(response.data)\n        )\n    }, [id])\n\n    if (!zook) {\n        return <Loader active inline='centered'/>;\n    } else {\n\n        const owner = () => {\n            if (zook.about.owner) {\n                return (<Table.Cell>\n                    <Link to={`/users/${zook.about.owner.username}`}>{zook.about.owner.username}</Link>\n                </Table.Cell>)\n            } else {\n                return <Table.Cell>Anonymous</Table.Cell>\n            }\n        }\n        return (\n            <Segment.Group>\n                <Segment clearing attached='top'>\n                    <Header floated=\"left\" size='huge' style={{margin: 0}}>\n                        Zook Name: {zook.identifier.name}\n                    </Header>\n                    <Header floated=\"right\" size='huge'>\n                        Zook ID: {zook.identifier.id}\n                    </Header>\n                </Segment>\n                <Segment attached>\n                    <Grid stackable>\n                        <div className=\"two column row ui segment attached\">\n                            <Grid.Column style={{flex: \"0\"}}>\n                                <div style={{minWidth: 256}}>\n                                    <LoadingZookImage zookId={zook.identifier.id} alt={zook.identifier.name}\n                                                      style={{marginBottom: 10}}/>\n                                    <Button color='blue' as=\"a\" icon=\"download\" fluid\n                                            content=\"Download Zook\"\n                                            href={`${process.env.REACT_APP_STATIC_URL}/zooks/${zook.identifier.id}/${zook.identifier.name}`}/>\n                                </div>\n                            </Grid.Column>\n                            <Grid.Column style={{flex: \"1\"}}>\n                                <Table celled striped unstackable color=\"green\">\n                                    <Table.Header>\n                                        <Table.Row>\n                                            <Table.HeaderCell colSpan='2'>About</Table.HeaderCell>\n                                        </Table.Row>\n                                    </Table.Header>\n                                    <Table.Body>\n                                        <Table.Row>\n                                            <Table.Cell>Owner</Table.Cell>\n                                            {owner()}\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Birth/Adoption date</Table.Cell>\n                                            <Table.Cell>{zook.about.dateCreated}</Table.Cell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Date of Upload</Table.Cell>\n                                            <Table.Cell>{zook.about.dateUploaded}</Table.Cell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Number of Downloads</Table.Cell>\n                                            <Table.Cell>{zook.about.downloads}</Table.Cell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Number of times viewed</Table.Cell>\n                                            <Table.Cell>{zook.about.views}</Table.Cell>\n                                        </Table.Row>\n                                    </Table.Body>\n                                </Table>\n                            </Grid.Column>\n                        </div>\n                        <div className=\"column row ui segment attached\">\n                            <Grid.Column>\n                                <Table celled striped unstackable color=\"green\">\n                                    <Table.Header>\n                                        <Table.Row>\n                                            <Table.HeaderCell colSpan='2'>Physical Information</Table.HeaderCell>\n                                        </Table.Row>\n                                    </Table.Header>\n                                    <Table.Body>\n                                        <Table.Row>\n                                            <Table.Cell>Height</Table.Cell>\n                                            <Table.Cell>{zook.physical.height} cm</Table.Cell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Length</Table.Cell>\n                                            <Table.Cell>{zook.physical.length} cm</Table.Cell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Width</Table.Cell>\n                                            <Table.Cell>{zook.physical.width} cm</Table.Cell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Weight</Table.Cell>\n                                            <Table.Cell>{zook.physical.weight} kg</Table.Cell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Cell>Components</Table.Cell>\n                                            <Table.Cell>{zook.physical.components}</Table.Cell>\n                                        </Table.Row>\n                                    </Table.Body>\n                                </Table>\n                                <Table celled striped unstackable color=\"green\">\n                                    <Table.Header>\n                                        <Table.Row>\n                                            <Table.HeaderCell colSpan={3}>Achievements</Table.HeaderCell>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.HeaderCell>Trial</Table.HeaderCell>\n                                            <Table.HeaderCell>Result</Table.HeaderCell>\n                                            <Table.HeaderCell>Position</Table.HeaderCell>\n                                        </Table.Row>\n                                    </Table.Header>\n                                    <Table.Body>\n                                        <Trial trial={zook.achievement.sprint} trialName=\"Sprint\"\n                                               measurement=\"cm/sec\"/>\n                                        <Trial trial={zook.achievement.blockPush} trialName=\"Block Push\"\n                                               measurement=\"cm\"/>\n                                        <Trial trial={zook.achievement.hurdles} trialName=\"Hurdles\"\n                                               measurement=\"cm/sec\"/>\n                                        <Trial trial={zook.achievement.highJump} trialName=\"High Jump\"\n                                               measurement=\"cm\"/>\n                                        <Trial trial={zook.achievement.lap} trialName=\"Lap\"\n                                               measurement=\"sec\"/>\n                                        <Trial trial={zook.achievement.overall} trialName=\"Overall\"\n                                               measurement=\"\" extraStyle={overallRowStyle}/>\n                                    </Table.Body>\n                                </Table>\n                            </Grid.Column>\n                        </div>\n                    </Grid>\n                </Segment>\n            </Segment.Group>\n        )\n    }\n}\n\nexport default Zook","import React, {FC, useState} from 'react'\nimport {Button, Form, Header, Icon, Message, Segment, Table} from 'semantic-ui-react'\nimport {Redirect} from 'react-router-dom';\nimport axios, {AxiosError} from \"axios\";\n\ntype TUploadResponse = {\n    id: number\n}\n\ntype TUploadError = {\n    error: string\n}\n\nconst Upload: FC = () => {\n    const [zookId, setZookId] = useState<number>()\n    const [loading, setLoading] = useState<boolean>(false)\n    const [fileValid, setFileValid] = useState<boolean>(false)\n\n    const [formData, setFormData] = useState<FormData>(new FormData())\n\n    const [uploadError, setUploadError] = useState<string>()\n\n\n    const handleSubmit = () => {\n        if (formData.get('zook')) {\n            setLoading(true)\n            axios.post<TUploadResponse>('/zooks/upload', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            }).then(response => {\n                    setZookId(response.data.id)\n                    setLoading(false)\n                }\n            ).catch((error: AxiosError<TUploadError>) => {\n                if (error.response) {\n                    setUploadError(error.response.data.error)\n                    setFileValid(false)\n                    setLoading(false)\n\n                } else {\n                    throw error\n                }\n            })\n        }\n    }\n\n    const fileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let file = event.target.files?.item(0)\n        setUploadError(undefined)\n        if (file && file.name.endsWith(\".zook\")) {\n            const formData = new FormData()\n            formData.append('zook', file)\n            setFormData(formData)\n            setFileValid(true)\n        } else {\n            setFileValid(false)\n        }\n    }\n\n    if (zookId) {\n        return <Redirect to={`/zooks/${zookId}`}/>\n    } else {\n        return (\n            <Segment.Group>\n                <Segment>\n                    <Header size='huge'>\n                        Zook Upload\n                    </Header>\n                </Segment>\n                <Segment>\n                    <Table compact color=\"orange\" inverted>\n                        <Table.Header>\n                            <Table.Row>\n                                <Table.HeaderCell><Icon name='attention'/> Upload Requirements</Table.HeaderCell>\n                            </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            <Table.Row>\n                                <Table.Cell error>\n                                    <Icon name='attention'/>Must have a Passport Photo</Table.Cell>\n                            </Table.Row>\n                            <Table.Row>\n                                <Table.Cell error>\n                                    <Icon name='attention'/>Does not support Street Rules</Table.Cell>\n                            </Table.Row>\n                        </Table.Body>\n                    </Table>\n                </Segment>\n                <Segment>\n                    <Form onSubmit={handleSubmit} loading={loading} error={!!uploadError}>\n                        <Form.Field error={!!uploadError}>\n                            <label>Zook File</label>\n                            <input type='file'\n                                   onChange={fileChange}\n                                   accept=\".zook\"/>\n                        </Form.Field>\n                        <Message\n                            error\n                            header={uploadError}\n                        />\n                        <Button type=\"submit\" color='blue' icon=\"upload\" disabled={!fileValid} content=\"Upload Zook\"/>\n                    </Form>\n                </Segment>\n            </Segment.Group>\n        )\n    }\n}\n\nexport default Upload","import React, {Component} from 'react';\nimport {Header, Icon, List, Loader, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport {TZookIdentifier} from \"../types/TZookIdentifier\";\nimport {Link} from \"react-router-dom\";\n\ninterface IZooksProps {\n\n}\n\ninterface IZooksState {\n    loading: boolean\n    zooks: TZookIdentifier[],\n}\n\nexport default class Zooks extends Component<IZooksProps,IZooksState> {\n    state = {\n        loading: true,\n        zooks: []\n    }\n\n    async componentDidMount() {\n        axios.get<TZookIdentifier[]>('/zooks').then(response =>\n            this.setState({\n                loading: false,\n                zooks: response.data\n            })\n        )\n    }\n\n    render() {\n        if (this.state.loading) {\n            return <Loader active inline='centered'/>;\n        } else {\n            const zookItems = this.state.zooks.map(({id, name}) => (\n                <List.Item as={Link} to={`/zooks/${id}`} key={id}>\n                    <Icon name='bug' inverted/>\n                    <List.Content>\n                        <List.Header>{id} - <b>{name}</b></List.Header>\n                    </List.Content>\n                </List.Item>\n            ))\n            return (\n                <Segment.Group>\n                    <Segment>\n                        <Header size=\"huge\">\n                            Zooks\n                        </Header>\n                    </Segment>\n                    <Segment>\n                        <List divided selection size='large'>\n                            {zookItems}\n                        </List>\n                    </Segment>\n                </Segment.Group>\n            )\n        }\n    }\n}","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\nimport {Button, Dropdown, Form, Header, Segment} from \"semantic-ui-react\";\nimport axios, {AxiosError, AxiosResponse} from 'axios';\nimport {TUserIdentifier} from \"../types/TUserIdentifier\";\n\nconst Admin: FC = () => {\n    const [loading, setLoading] = useState<boolean>(false)\n    const [users, setUsers] = useState<TUserIdentifier[]>([])\n\n    useEffect(() => {\n        setLoading(true)\n        axios.get<TUserIdentifier[]>('/users').then(response => {\n                setLoading(false)\n                setUsers(response.data)\n            }\n        )\n    }, [])\n\n\n    const [ownerSetZookId, setOwnerSetZookId] = useState<string>()\n    const [ownerSetOwner, setOwnerSetOwner] = useState<string>()\n\n\n    const [updateOwnerResponse, setUpdateOwnerResponse] = useState<AxiosResponse>()\n\n    const updateOwner = () => {\n        setLoading(true)\n        axios.patch(`admin/zook/${ownerSetZookId}/owner/${ownerSetOwner}`).then((response: AxiosResponse) => {\n                setUpdateOwnerResponse(response)\n                setLoading(false)\n            }\n        ).catch((error: AxiosError) => {\n            setLoading(false)\n            setUpdateOwnerResponse(error.response)\n        })\n    }\n\n    return (\n        <Segment.Group>\n            <Segment>\n                <Header size=\"huge\">\n                    Admin Tools\n                </Header>\n            </Segment>\n            <Segment loading={loading}>\n                <Header size=\"medium\">\n                    Zook Owner Assigner\n                </Header>\n                <Form onSubmit={updateOwner}>\n                    <Form.Group widths='equal'>\n                        <Form.Field>\n                            <label>ZookId</label>\n                            <input name=\"zookId\" placeholder='Zook Id' type=\"number\" inputMode=\"numeric\"\n                                   onChange={(event: ChangeEvent<HTMLInputElement>) => setOwnerSetZookId(event.target.value)}/>\n                        </Form.Field>\n                        <Form.Field>\n                            <label>Owner</label>\n                            <Dropdown\n                                name=\"owner\"\n                                clearable\n                                options={users.map(({username}) => ({\n                                    text: username,\n                                    value: username\n                                }))}\n                                selection\n                                onChange={(event, data) => setOwnerSetOwner(data.value as string)}\n                            />\n                        </Form.Field>\n                    </Form.Group>\n                    <Button type='submit'>Update</Button>\n                    <pre>Response: {updateOwnerResponse?.status} - {JSON.stringify(updateOwnerResponse?.data)}</pre>\n                </Form>\n\n\n            </Segment>\n        </Segment.Group>\n    )\n\n}\n\nexport default Admin","import React, {FC} from 'react'\nimport {Button, Container, Icon, Menu as SMenu} from 'semantic-ui-react'\nimport {NavLink} from \"react-router-dom\";\nimport {UserLoginState, UserState} from \"../redux/userReducer\";\nimport {useSelector} from \"react-redux\";\nimport {ApplicationState} from \"../redux/rootReducer\";\nimport {useLogoutAction} from \"../actions/AuthAction\";\n\n\nconst zookRegex = /^\\/zooks\\/?\\d*$/\n\nconst Menu: FC = () => {\n\n    const userState = useSelector<ApplicationState, UserState>(state => state.user)\n\n    const logout = useLogoutAction()\n\n    const loginState = () => {\n\n        switch (userState.state) {\n            case UserLoginState.LoggedIn:\n                let username = userState.username\n                return <SMenu.Menu position='right'>\n                    <NavLink to={`/users/${username}`} activeClassName=\"active\" className=\"item\"\n                             isActive={(_, {pathname}) => {\n                                 return `/users/${username}` === pathname\n                             }}\n                    >{username}</NavLink>\n                    <SMenu.Item>\n                        <Button active={true} onClick={logout} primary>Logout</Button>\n                    </SMenu.Item>\n                </SMenu.Menu>\n\n            case UserLoginState.LoggedOut:\n                return <SMenu.Menu position='right'>\n                    <SMenu.Item>\n                        <NavLink to=\"/login\" activeClassName=\"active\" className=\"ui primary button\">Login</NavLink>\n                    </SMenu.Item>\n                </SMenu.Menu>\n\n            case UserLoginState.Registering:\n                return <SMenu.Menu position='right'>\n                    <SMenu.Item>\n                        <Button active={true} onClick={logout} color='red' primary>Cancel</Button>\n                    </SMenu.Item>\n                </SMenu.Menu>\n        }\n    }\n\n\n    return (\n        <Container>\n            <SMenu>\n                <NavLink to=\"/\" activeClassName=\"active\" className=\"item\" exact={true} style={{padding: 10}}>\n                    <img src={`${process.env.PUBLIC_URL}/logo.png`} alt={\"logo\"}/><b\n                    style={{paddingLeft: 10}}>ZookLabs</b></NavLink>\n                <NavLink to=\"/zooks\" activeClassName=\"active\" className=\"item\"\n                         isActive={(_, {pathname}) => {\n                             return zookRegex.test(pathname)\n                         }}\n                >Zooks</NavLink>\n                <NavLink to=\"/leagues\" activeClassName=\"active\" className=\"item\">Leagues</NavLink>\n                <NavLink to=\"/zooks/upload\" activeClassName=\"active\" className=\"item\" exact={true}>Upload</NavLink>\n                <NavLink to=\"/users\" activeClassName=\"active\" className=\"item\">Users</NavLink>\n                {loginState()}\n                <a className=\"discord item\" href=\"http://discord.zooklabs.com\"><Icon name='discord'\n                                                                                     inverted/>Discord</a>\n            </SMenu>\n        </Container>\n    )\n}\n\nexport default Menu\n","import React, {FC, useEffect, useState} from \"react\";\nimport {useHistory, useParams} from \"react-router\";\nimport {Header, Icon, List, Loader, Segment, Table} from \"semantic-ui-react\";\nimport axios from \"axios\";\nimport {TZookIdentifier} from \"../types/TZookIdentifier\";\nimport {TUserIdentifier} from \"../types/TUserIdentifier\";\nimport {Link} from \"react-router-dom\";\n\ntype TUserAbout = {\n    signUpAt: string\n    lastLoginAt: string\n}\n\ntype TUser = {\n    identifier: TUserIdentifier,\n    about: TUserAbout,\n    zooks: TZookIdentifier[]\n}\n\ninterface RouteParams {\n    username: string\n}\n\nconst User: FC = () => {\n    let {username} = useParams<RouteParams>()\n    let history = useHistory()\n\n    const [user, setUser] = useState<TUser>();\n\n    useEffect(() => {\n        axios.get<TUser>(`users/${username}`).then(response => {\n                history.replace(response.data.identifier.username)\n                setUser(response.data)\n            }\n        )\n    }, [username, history])\n\n\n    if (user) {\n        const zookItems = user.zooks.map(({id, name}) => (\n            <List.Item as={Link} to={`/zooks/${id}`} key={id}>\n                <Icon name='bug' inverted/>\n                <List.Content>\n                    <List.Header>{id} - <b>{name}</b></List.Header>\n                </List.Content>\n            </List.Item>\n        ))\n\n\n        return <Segment.Group>\n            <Segment clearing attached='top'>\n                <Header floated=\"left\" size='huge' style={{margin: 0}}>\n                    User: {user.identifier.username}\n                </Header>\n            </Segment>\n            <Table attached='top' celled striped unstackable color=\"green\">\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell colSpan='2'>About</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    <Table.Row>\n                        <Table.Cell>Signed Up</Table.Cell>\n                        <Table.Cell>{user.about.signUpAt}</Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>Last Logged In</Table.Cell>\n                        <Table.Cell>{user.about.lastLoginAt}</Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>Uploaded Zooks</Table.Cell>\n                        <Table.Cell>{zookItems.length}</Table.Cell>\n                    </Table.Row>\n                </Table.Body>\n            </Table>\n\n            <Segment attached>\n                <List divided selection size='large'>\n                    {zookItems}\n                </List>\n            </Segment>\n        </Segment.Group>\n    } else {\n\n        return <Segment><Loader active inline='centered'/></Segment>\n    }\n}\n\nexport default User","import React, {FC, useEffect} from 'react';\nimport './App.css';\nimport {useSelector} from \"react-redux\";\nimport {useLoginLoadAction} from \"./actions/AuthAction\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport {Redirect} from \"react-router-dom\";\nimport Register from \"./components/Register\";\nimport {isRegistering, UserState} from \"./redux/userReducer\";\nimport {ApplicationState} from \"./redux/rootReducer\";\nimport Home from \"./components/Home\";\nimport Login from \"./components/Login\";\nimport League from \"./components/League\";\nimport Leagues from \"./components/Leagues\";\nimport Users from \"./components/Users\";\nimport Zook from \"./components/Zook\";\nimport Upload from \"./components/Upload\";\nimport Zooks from \"./components/Zooks\";\nimport Admin from \"./components/Admin\";\nimport Menu from \"./components/Menu\";\nimport {Container} from \"semantic-ui-react\";\nimport User from \"./components/User\";\n\n\nconst App: FC = () => {\n\n    const userState = useSelector<ApplicationState, UserState>(state => state.user)\n\n    const loginLoad = useLoginLoadAction()\n\n    useEffect(loginLoad, [loginLoad]);\n\n    let registering = () => {\n        return <>\n            <Switch>\n                <Route path=\"/login\" exact component={Register}/>\n                <Redirect to=\"/login\"/>\n            </Switch>\n        </>\n    }\n\n    let routes = () => {\n        return <>\n            <Switch>\n                <Route path=\"/\" exact component={Home}/>\n                <Route path=\"/login\" exact component={Login}/>\n\n                <Route path=\"/zooks/upload\" exact component={Upload}/>\n                <Route path=\"/zooks/:id\" component={Zook}/>\n                <Route path=\"/zooks\" exact component={Zooks}/>\n\n                <Route path=\"/users\" exact component={Users}/>\n                <Route path=\"/users/:username\" component={User}/>\n\n                <Route path=\"/leagues\" exact component={Leagues}/>\n                <Route path=\"/leagues/sprint\"\n                       render={props => <League {...props} league=\"sprint\" title=\"Sprint\"\n                                                measurement=\"cm/sec\"/>}/>\n                <Route path=\"/leagues/block_push\"\n                       render={props => <League {...props} league=\"block_push\" title=\"Block Push\"\n                                                measurement=\"cm\"/>}/>\n                <Route path=\"/leagues/hurdles\"\n                       render={props => <League {...props} league=\"hurdles\" title=\"Hurdles\"\n                                                measurement=\"cm/sec\"/>}/>\n                <Route path=\"/leagues/high_jump\"\n                       render={props => <League {...props} league=\"high_jump\" title=\"High Jump\"\n                                                measurement=\"cm\"/>}/>\n                <Route path=\"/leagues/lap\"\n                       render={props => <League {...props} league=\"lap\" title=\"Lap\"\n                                                measurement=\"sec\"/>}/>\n\n                <Route path=\"/leagues/overall_league\"\n                       render={props => <League {...props} league=\"overall_league\" title=\"Overall\"\n                                                measurement=\"\"/>}/>\n\n                <Route path=\"/admin\" exact component={Admin}/>\n\n                <Redirect to=\"/\"/>\n            </Switch>\n        </>\n    }\n\n\n    return (\n        <Router>\n            <Menu/>\n            <Container>\n                {isRegistering(userState) ? registering() : routes()}\n            </Container>\n        </Router>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux'\nimport {userReducer, initialUserState, UserState} from \"./userReducer\";\n\nexport interface ApplicationState {\n  user: UserState\n}\n\nexport const initialState: ApplicationState = {\n    user: initialUserState\n};\n\n\nexport const rootReducer = combineReducers<ApplicationState>({\n  user: userReducer\n})\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {CookiesProvider} from \"react-cookie\";\nimport 'semantic-ui-css/semantic.min.css'\nimport {createStore, Store} from 'redux'\nimport {Provider as StoreProvider} from \"react-redux\";\nimport {ApplicationState, rootReducer} from \"./redux/rootReducer\";\nimport {devToolsEnhancer} from \"redux-devtools-extension/index\";\nimport axios from 'axios';\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL\n\nconst store: Store<ApplicationState> = createStore(rootReducer, devToolsEnhancer({}));\n\nReactDOM.render(\n    <React.StrictMode>\n        <CookiesProvider>\n            <StoreProvider store={store}>\n                <App/>\n            </StoreProvider>\n        </CookiesProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}