{"version":3,"sources":["api/config.js","api/zook.js","pages/Zook.js","pages/Zooks.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["SERVER_BASE_URL","ApiZook","fetch","method","headers","Headers","then","response","json","id","Zook","props","match","params","state","loading","zook","get","this","value","setState","trail","trialName","score","position","name","dateCreated","dateUploaded","href","colSpan","align","height","length","width","weight","components","Trial","sprint","blockPush","hurdles","highJump","lap","React","Component","Zooks","zooks","getList","map","key","Home","Leagues","useRouteMatch","path","url","to","exact","Sprint","BlockPush","Boolean","window","location","hostname","ReactDOM","render","Container","children","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.93f5a072.chunk.js","sourcesContent":["const SERVER_BASE_URL = \"https://zooklabstest.herokuapp.com\";\n\nexport default SERVER_BASE_URL;","import SERVER_BASE_URL from './config';\n\n// API Pets static class\nexport default class ApiZook {\n\n  // get a list of zooks\n  static getList() {\n    return fetch(`${SERVER_BASE_URL}/api/zook`, {\n      method: 'get',\n      headers: new Headers({'content-type': 'application/json'})\n    }).then(response => response.json());\n  }\n\n  // get zook detail\n  static get(id) {\n    return fetch(`${SERVER_BASE_URL}/api/zook/${id}`, {\n      method: 'get',\n      headers: new Headers({'content-type': 'application/json'})\n    }).then(response => response.json());\n  }\n}","import React from 'react';\nimport ApiZook from \"../api/zook\";\n\nexport default class Zook extends React.Component {\n\n    id = this.props.match.params.id;\n\n    state = {\n        loading: true,\n        zook: null,\n    };\n\n    async componentDidMount() {\n        ApiZook.get(this.id).then(value => this.setState({\n            loading: false,\n            zook: value,\n        }));\n    };\n\n    Trial(props) {\n        if(props.trail == null) {\n            return (<tr>\n                <td>{props.trialName}</td>\n                <td>N/A</td>\n                <td>N/A</td>\n            </tr>);\n        }else{\n            return (<tr>\n                <td>{props.trialName}</td>\n                <td>{props.trail.score} cm/s</td>\n                <td>{props.trail.position} pos</td>\n            </tr>);\n        }\n    }\n\n    render() {\n        if (this.state.loading) {\n            return <div>loading...</div>;\n        }\n        return (\n            <div>\n                <div>\n                    <div>\n                        {/*<img src=\"@imageLink\"/>*/}\n                    </div>\n                    <p>Zook Name: {this.state.zook.name}\n\n                        Zook ID:{this.state.zook.id}\n\n                        Owner: --\n                        Birth/Adoption Date: {this.state.zook.dateCreated}\n                        Date of Uploaded: {this.state.zook.dateUploaded}\n                        Original Creator: --\n                        Number of Downloads: --\n                        Number of times viewed: --\n\n                        <a href=\"/\">Download</a></p>\n                </div>\n                <div>\n                    <table>\n                        <thead>\n                        <tr>\n                            <th colSpan=\"2\" align=\"left\">Physical Information</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td>Height</td>\n                            <td>{this.state.zook.height} cm</td>\n                        </tr>\n                        <tr>\n                            <td>Length</td>\n                            <td>{this.state.zook.length} cm</td>\n                        </tr>\n                        <tr>\n                            <td>Width</td>\n                            <td>{this.state.zook.width} cm</td>\n                        </tr>\n                        <tr>\n                            <td>Weight</td>\n                            <td>{this.state.zook.weight} kg</td>\n                        </tr>\n                        <tr>\n                            <td>Components</td>\n                            <td>{this.state.zook.components}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div>\n                    <table>\n                        <thead>\n                        <tr>\n                            <th colSpan=\"3\" align=\"left\">Achievements</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <th>Trial</th>\n                            <th>Result</th>\n                            <th>Position</th>\n                        </tr>\n                        <this.Trial trail={this.state.zook.sprint} trialName=\"Sprint\"/>\n                        <this.Trial trail={this.state.zook.blockPush} trialName=\"BlockPush\"/>\n                        <this.Trial trail={this.state.zook.hurdles} trialName=\"Hurdles\"/>\n                        <this.Trial trail={this.state.zook.highJump} trialName=\"HighJump\"/>\n                        <this.Trial trail={this.state.zook.lap} trialName=\"Lap\"/>\n                        </tbody>\n                    </table>\n                </div>\n                <div>\n                    <div>\n                        <h2>Zook History</h2>\n                        <table>\n                            <tbody>\n                            <tr>\n                                <th>Zook</th>\n                                <th>Owner</th>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        )\n    };\n}\n\n// export default Zook;\n\n//\n// function Zook() {\n//     return (\n//         <div style=\"display: table;\n//         width: 100%;\">\n//             <div style=\"display: table-row;\">\n//                 <div style=\"width: 256px;\n//                 height: 256px;\n//                 display: inline-block;\">\n//                     {/*<img src=\"@imageLink\"/>*/}\n//                 </div>\n//                 <div style=\"display: inline-block;\n//                 height: 256px;\n//                 vertical-align: top;\">\n//                     Zook Name: @zookView.name<br>\n//                     Zook ID:@zookView.id<br>\n//                     <br>\n//                         Owner: --<br>\n//                         Birth/Adoption Date: @{\n//                         zookView.dateCreated\n//                     }<br>\n//                         Date of Uploaded: @zookView.dateUploaded<br>\n//                         Original Creator: --<br>\n//                         Number of Downloads: --<br>\n//                         Number of times viewed: --<br>\n//                         <br>\n//                             <a href=\"@zookLink\">Download</a><br>\n//                 </div>\n//             </div>\n//             <div style=\"display: table-row;\">\n//                 <table style=\"width: 500px\">\n//                     <tr>\n//                         <th colSpan=\"2\" style=\"height: 30px\" align=\"left\">Physical Information</th>\n//                     </tr>\n//                     <tr>\n//                         <td>Height</td>\n//                         <td>@zookView.height cm</td>\n//                     </tr>\n//                     <tr>\n//                         <td>Length</td>\n//                         <td>@zookView.length cm</td>\n//                     </tr>\n//                     <tr>\n//                         <td>Width</td>\n//                         <td>@zookView.width cm</td>\n//                     </tr>\n//                     <tr>\n//                         <td>Weight</td>\n//                         <td>@zookView.weight kg</td>\n//                     </tr>\n//                     <tr>\n//                         <td>Components</td>\n//                         <td>@zookView.components</td>\n//                     </tr>\n//                 </table>\n//             </div>\n//             <div style=\"display: table-row;\">\n//                 <table style=\"width: 500px\">\n//                     <tr>\n//                         <th colSpan=\"3\" style=\"height: 30px\" align=\"left\">Achievements</th>\n//                     </tr>\n//                     <tr>\n//                         <th>Trial</th>\n//                         <th>Result</th>\n//                         <th>Position</th>\n//                     </tr>\n//                     <tr>\n//                         <td>Sprint</td>\n//                         <td>@{\n//                             zookView.sprint.map(_._1) match {\n//                             case Some(score) => s\"$score cm/sec\"\n//                             case None => \"N/A\"\n//                         }\n//                         }</td>\n//                         <td>@zookView.sprint.map(_._2).getOrElse(\"N/A\")</td>\n//                     </tr>\n//                     <tr>\n//                         <td>BlockPush</td>\n//                         <td>@{\n//                             zookView.blockPush.map(_._1) match {\n//                             case Some(score) => s\"$score cm\"\n//                             case None => \"N/A\"\n//                         }\n//                         }</td>\n//                         <td>@zookView.blockPush.map(_._2).getOrElse(\"N/A\")</td>\n//                     </tr>\n//                     <tr>\n//                         <td>Hurdles</td>\n//                         <td>@{\n//                             zookView.hurdles.map(_._1) match {\n//                             case Some(score) => s\"$score cm/sec\"\n//                             case None => \"N/A\"\n//                         }\n//                         }</td>\n//                         <td>@zookView.hurdles.map(_._2).getOrElse(\"N/A\")</td>\n//                     </tr>\n//                     <tr>\n//                         <td>HighJump</td>\n//                         <td>@{\n//                             zookView.highJump.map(_._1) match {\n//                             case Some(score) => s\"$score cm\"\n//                             case None => \"N/A\"\n//                         }\n//                         }</td>\n//                         <td>@zookView.highJump.map(_._2).getOrElse(\"N/A\")</td>\n//                     </tr>\n//                     <tr>\n//                         <td>Lap</td>\n//                         <td>@{\n//                             zookView.lap.map(_._1) match {\n//                             case Some(score) => s\"$score sec\"\n//                             case None => \"N/A\"\n//                         }\n//                         }</td>\n//                         <td>@zookView.lap.map(_._2).getOrElse(\"N/A\")</td>\n//                     </tr>\n//                 </table>\n//             </div>\n//             <div style=\"display: table-row;\">\n//                 <div style=\"display: table-cell;\">\n//                     <h2>Zook History</h2>\n//                     <table>\n//                         <tbody>\n//                         <tr>\n//                             <th>Zook</th>\n//                             <th>Owner</th>\n//                         </tr>\n//                         </tbody>\n//                     </table>\n//                 </div>\n//             </div>\n//         </div>\n// );\n// }\n//\n// export default Zook;\n","import React from 'react';\nimport ApiZook from \"../api/zook\";\n\nexport default class Zooks extends React.Component {\n\n    state = {\n        loading: true,\n        zooks: [],\n    };\n\n    async componentDidMount() {\n        ApiZook.getList().then(value => this.setState({\n            loading: false,\n            zooks: value,\n        }));\n    };\n\n    render() {\n        if (this.state.loading) {\n            return <div>loading...</div>;\n        }\n        return (\n            <div>\n                <ul>\n                    {this.state.zooks.map(zook => (\n                        <li key={zook.id}>\n                            <a href={\"/zook/\" + zook.id}>{zook.name}</a>\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        );\n    }\n}","import React from 'react';\n\nfunction Home() {\n  return (\n      <h1>Welcome To Zook Labs</h1>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Link, Route, Switch, useRouteMatch} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Zook from './pages/Zook'\nimport Zooks from './pages/Zooks'\nimport Home from './pages/Home'\nimport Container from \"react-bootstrap/Container\";\n\nexport default function App() {\n    return (\n        <Container>\n            <Router>\n                <div>\n                    <nav>\n                        <ul>\n                            <li>\n                                <Link to=\"/\">Home</Link>\n                            </li>\n                            <li>\n                                <Link to=\"/zook\">Zooks</Link>\n                            </li>\n                            <li>\n                                <Link to=\"/leagues\">Leagues</Link>\n                            </li>\n                        </ul>\n                    </nav>\n\n                    <Switch>\n                        <Route path=\"/\" exact children={<Home/>}/>\n                        <Route path=\"/zook/:id\" component={Zook}/>\n                        <Route path=\"/zook\" component={Zooks}/>\n                        <Route path=\"/leagues\" children={<Leagues/>}/>\n                    </Switch>\n                </div>\n            </Router>\n        </Container>\n    );\n}\n\nfunction Leagues() {\n    let {path, url} = useRouteMatch();\n\n    return (\n        <div>\n            <h2>Leagues</h2>\n            <ul>\n                <li>\n                    <Link to={`${url}/sprint`}>Sprint</Link>\n                </li>\n                <li>\n                    <Link to={`${url}/blockpush`}>Blockpush</Link>\n                </li>\n            </ul>\n\n            <Switch>\n                <Route exact path={path}>\n                    <h3>Leagues</h3>\n                </Route>\n                <Route path={`${path}/sprint`}>\n                    <Sprint/>\n                </Route>\n                <Route path={`${path}/blockpush`}>\n                    <BlockPush/>\n                </Route>\n                {/*TODO implement league pages*/}\n            </Switch>\n        </div>\n    );\n}\n\n\nfunction Sprint() {\n    return <h2>Sprint</h2>;\n}\n\nfunction BlockPush() {\n    return <h2>BlockPush</h2>;\n}\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}